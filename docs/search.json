[{"path":"https://jonesor.github.io/mpmsim/articles/age_from_stage.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"The robustness of age from stage methods","text":"Stage-classified matrix population models (Lefkovitch models), valuable tools studying population dynamics, especially cases organism demography dependent ontogenetic stage populations age determination difficult. analysis models often adequate, situations age-related information desired, Leslie matrix life table. Cochran Ellner (1992) developed methods obtain age-related life history traits breaking transition matrix birth, survival, fission matrices. methods allow calculation discrete survivorship maternity functions. two fundamental trajectories, various life history metrics can calculated including mean age maturity, generation time, age-specific reproductive value, senescence measures. well methods really perform? example, perform equally well functional forms mortality? Can capture differences senescence rate? following vignette illustrates mpmsim can used address one questions.","code":""},{"path":"https://jonesor.github.io/mpmsim/articles/age_from_stage.html","id":"age-from-stage","dir":"Articles","previous_headings":"","what":"Age-from-stage","title":"The robustness of age from stage methods","text":"First load required packages. Next use model_survival() function create list age-specific survival trajectories based Gompertz mortality function senescence rates (b_1_values) varying 0.1 0.9. values basis life tables. analysis want convert age-based trajectories stage-based matrix models. divide yearly age entries stages. arbitrary way dividing age vector 3 parts: quarter juveniles, half adult, another quarter old individuals. Next ’ll add fertility life tables. Let’s take look one life tables data preparation far clear. important columns age (x), survival (px), fertility (fert) stage (see ?mpm_to_table explanation columns life table). next step turn life tables matching pairs (1) Leslie matrices (2) stage-based matrices.","code":"library(mpmsim) library(dplyr) library(Rage) b_1_values <- seq(0.1, 0.9, 0.1) lifeTables <- list() for (i in 1:length(b_1_values)) {   lifeTables[[i]] <- model_survival(     params = c(b_0 = 0.1, b_1 = b_1_values[i]),     model = \"Gompertz\"   ) } for (i in 1:length(lifeTables)) {   lifeTables[[i]] <- lifeTables[[i]] |>     mutate(stage = ifelse(x <= round(max(x) * 0.25), 1,       ifelse(x <= round(max(x) * 0.75), 2, 3)     )) } for (i in 1:length(lifeTables)) {   lifeTables[[i]] <- lifeTables[[i]] |>     mutate(fert = model_fertility(       age = x, params = c(A = 3),       maturity = min(x[stage == 2]),       model = \"step\"     )) } lifeTables[[5]] #>   x        hx         lx        qx         px stage fert #> 1 0 0.1000000 1.00000000 0.1240411 0.87595894     1    0 #> 2 1 0.1648721 0.87595894 0.1961561 0.80384392     1    0 #> 3 2 0.2718282 0.70413427 0.3023227 0.69767734     1    0 #> 4 3 0.4481689 0.49125852 0.4476301 0.55236995     2    3 #> 5 4 0.7389056 0.27135645 0.6241546 0.37584536     2    3 #> 6 5 1.2182494 0.10198806 0.8007912 0.19920884     3    3 #> 7 6 2.0085537 0.02031692 0.9300552 0.06994476     3    3"},{"path":"https://jonesor.github.io/mpmsim/articles/age_from_stage.html","id":"leslie-matrices","dir":"Articles","previous_headings":"Age-from-stage","what":"Leslie matrices","title":"The robustness of age from stage methods","text":"First Now can turn life tables containing age-specific survival fertility trajectories Leslie matrices using make_leslie_mpm function. matrix models can large small depending maximum life span population: life tables , default, constrained extend age survivorship function falls 0.01. Let’s examine Leslie matrix matches life table previous section.","code":"leslie_matrices <- list() for (i in 1:length(lifeTables)) {   leslie_matrices[[i]] <- make_leslie_mpm(     survival = lifeTables[[i]]$px,     fertility = lifeTables[[i]]$fert,     n_stages = nrow(lifeTables[[i]]), split = TRUE   ) } leslie_matrices[[5]]$matA #> NULL"},{"path":"https://jonesor.github.io/mpmsim/articles/age_from_stage.html","id":"lefkovitch-matrices","dir":"Articles","previous_headings":"Age-from-stage","what":"Lefkovitch matrices","title":"The robustness of age from stage methods","text":"Leslie matrices can now construct stage-structured matrix models (Lefkovitch models) using mpm_collapse() function Rage. Let’s examine Lefkovitch matrix matches Leslie matrix life table previous sections:","code":"collapsed_matrices <- list() for (i in 1:length(lifeTables)) {   stages <- lifeTables[[i]]$stage   matrices <- leslie_matrices[[i]]   collapse_list <- split(stages, stages)   # get the indices of each element in the original vector   collapse_list <- lapply(collapse_list, function(x) which(stages %in% x))    collapsed_matrices[[i]] <- Rage::mpm_collapse(     matU = matrices$mat_U,     matF = matrices$mat_F, collapse = collapse_list   ) } collapsed_matrices[[5]]$matA #>           1         2        3 #> 1 0.6670591 3.0000000 3.000000 #> 2 0.1476356 0.3821296 0.000000 #> 3 0.0000000 0.1158355 0.180401"},{"path":"https://jonesor.github.io/mpmsim/articles/age_from_stage.html","id":"recovering-age-specific-trajectories-from-the-stage-based-model","dir":"Articles","previous_headings":"","what":"Recovering age-specific trajectories from the stage-based model","title":"The robustness of age from stage methods","text":"Next can use age-stage-approximation see well can recover “true” values original Leslie matrix/life table. plot, red curve represents “true” values survivorship life table black curve represents estimation survivorship using age--stage approximation.","code":"recovered_life_tables <- list() for (i in 1:length(lifeTables)) {   m1 <- collapsed_matrices[[i]]   recovered_life_tables[[i]] <- Rage::mpm_to_table(     matU = m1$matU, matF = m1$matF,     remove_final = TRUE   ) } i <- 5 recovered_lt <- recovered_life_tables[[i]]  plot(0:(length(recovered_lt$lx) - 1),   recovered_lt$lx,   type = \"l\",   xlab = \"age\", ylab = \"survivorship\", main = \"Survivorship\" ) lines(lifeTables[[i]]$x, lifeTables[[i]]$lx, type = \"l\", col = \"red\")"},{"path":"https://jonesor.github.io/mpmsim/articles/age_from_stage.html","id":"mortality-and-longevity","dir":"Articles","previous_headings":"","what":"Mortality and longevity","title":"The robustness of age from stage methods","text":"also look life table trajectories mortality (hazard).  plot clearly shows mortality (hazard) underestimated across life course trajectory markedly different underlying Gompertz trajectory. caused known issue population structure reaching stationary state: population reaches state, rate change mortality/survival trajectory asymptote zero. can now examine -estimation life span using age--stage methods related Gompertz parameter like .","code":"plot(0:(length(recovered_lt$lx) - 1),   recovered_lt$hx,   type = \"l\",   xlab = \"age\", ylab = \"mortality\", main = \"mortality\", ylim = c(0, 2) ) lines(lifeTables[[i]]$x, lifeTables[[i]]$hx, type = \"l\", col = \"red\") df1 <- data.frame(b_1_values, lifespan_lt = NA, lifespan_afs = NA) for (i in 1:length(lifeTables)) {   df1$lifespan_lt[i] <- max(lifeTables[[i]]$x)   df1$lifespan_afs[i] <- max(recovered_life_tables[[i]]$x) }  df1 <- df1 %>%   mutate(lifespan_diff = lifespan_afs - lifespan_lt) %>%   mutate(lifespan_diff_perc = 100 * (lifespan_diff / lifespan_lt))  plot(df1$b_1_values, df1$lifespan_diff_perc,   type = \"b\",   ylab = \"Lifespan overestimation (%)\", xlab = \"Gompertz parameter\" )"},{"path":"https://jonesor.github.io/mpmsim/articles/age_from_stage.html","id":"further-questions","dir":"Articles","previous_headings":"","what":"Further questions?","title":"The robustness of age from stage methods","text":"explained elsewhere, issue can ameliorated examining convergence quasi-stationary state (QSD) (see ?Rage::qsd_converge()) affects mortality/survival fertility. One use methods outlined explore issues thoroughly (example) checking age--stage methods perform different life histories different functional forms mortality (see ?mpmsim::model_survival()) fertility. (?mpmsim::model_fertility()).","code":""},{"path":"https://jonesor.github.io/mpmsim/articles/error_propagation.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Sampling error and its propagation","text":"Uncertainty individual matrix elements matrix population model can lead sampling errors, propagate affect accuracy estimates MPM-derived metrics. metrics include population growth rate, generation time, reactivity many others. One way estimate uncertainty using bootstrapping approach whereby sampling distribution matrix model generated, based assumptions underlying processes matrix model uncertainties individual matrix elements. example, can assume fertility component matrix mean multiple Poisson processes, survival can modelled binomial process. compute_ci() function allows users estimate 95% confidence interval metric can derived matrix population model (). function generates sampling distribution resampling based assumptions calculates posterior distribution metric interest. lower upper bounds 95% CI estimated distribution. width CI reflects precision estimate; narrower CI indicates greater precision, wider CI indicates less precision. Various factors can influence width shape CI, sample size used estimate individual matrix elements, structure matrix model, underlying assumptions made compute_ci() function, distribution uncertainties individual matrix elements. crucial consider factors interpreting results matrix population model assessing precision resulting estimates.","code":""},{"path":"https://jonesor.github.io/mpmsim/articles/error_propagation.html","id":"estimate-95-ci-of-lambda","dir":"Articles","previous_headings":"","what":"Estimate 95% CI of lambda","title":"Sampling error and its propagation","text":"estimate 95% CI metric can calculated matrix model. example focus population growth rate, lambda. Let’s consider matrix model composed submatrices U F. need “split” matrix underlying processes governed distributions different statistical properties. assumed individual’s survival binary (0 = dies, 1 = survives) individual’s reproduction assumed Poisson process. example, matrix simple, top right element represents reproduction, elements represent survival /growth. \\[ \\mathbf{} = \\begin{bmatrix} 0.1 & 3.0 \\\\ 0.2 & 0.4 \\ \\end{bmatrix} \\] Thus: know sample size used estimate element matrix 20 individuals, can estimate downstream 95% confidence intervals , say lambda, follows: Note necessary use sample size element: sample size information can provided matrix integers can vary across matrix. can examine posterior distribution lambda estimates estimates using argument dist.= TRUE.","code":"matU <- matrix(c(   0.1, 0.0,   0.2, 0.4 ), byrow = TRUE, nrow = 2)  matF <- matrix(c(   0.0, 3.0,   0.0, 0.0 ), byrow = TRUE, nrow = 2) compute_ci(mat_U = matU, mat_F = matF, sample_size = 20, FUN = popdemo::eigs, what = \"lambda\") #> Warning in FUN(X[[i]], ...): More than one eigenvalues have equal absolute #> magnitude #>      2.5%     97.5%  #> 0.6288452 1.3771379 distLambda_20 <- compute_ci(   mat_U = matU, mat_F = matF,   sample_size = 20, FUN = popdemo::eigs, what = \"lambda\",   dist.out = TRUE ) hist(distLambda_20$estimates)"},{"path":"https://jonesor.github.io/mpmsim/articles/error_propagation.html","id":"exploring-the-impact-of-sample-size","dir":"Articles","previous_headings":"","what":"Exploring the impact of sample size","title":"Sampling error and its propagation","text":"sample size considerably larger, 100? Comparing two distributions, unsurprising posterior distribution large sample size narrower small sample size.  One use approach conduct power analysis simulation. example one ask, “sample size require order detect 20% change population growth rate?”  sample size higher elements others? problem, sample_size argument accepts matrix sample sizes (list matrices labelled mat_U_ss mat_F_ss).","code":"distLambda_100 <- compute_ci(   mat_U = matU, mat_F = matF,   sample_size = 100, FUN = popdemo::eigs, what = \"lambda\",   dist.out = TRUE ) par(mfrow = c(2, 1)) hist(distLambda_20$estimates, xlim = c(0, 1.75)) hist(distLambda_100$estimates, xlim = c(0, 1.75)) observedLambda <- popdemo::eigs(matU + matF, what = \"lambda\") reducedLambda <- observedLambda * 0.8   simDist <- compute_ci(   mat_U = matU, mat_F = matF,   sample_size = 50, FUN = popdemo::eigs, what = \"lambda\",   dist.out = TRUE )$estimates hist(simDist) abline(v = observedLambda, lty = 2, lwd = 2) abline(v = reducedLambda, lty = 2, lwd = 2, col = \"red\") sum(simDist < observedLambda) / length(simDist) #> [1] 0.512 sample_size_mat <- matrix(c(   20, 100,   20, 20 ), byrow = TRUE, nrow = 2)  distLambda_variable <- compute_ci(   mat_U = matU, mat_F = matF,   sample_size = sample_size_mat,   FUN = popdemo::eigs, what = \"lambda\",   dist.out = TRUE ) hist(distLambda_variable$estimates) par(mfrow = c(3, 1)) hist(distLambda_20$estimates, xlim = c(0, 1.75)) hist(distLambda_100$estimates, xlim = c(0, 1.75)) hist(distLambda_variable$estimates, xlim = c(0, 1.75)) popdemo::elas(matU + matF) #>            [,1]      [,2] #> [1,] 0.03897464 0.3659667 #> [2,] 0.36596672 0.2290919"},{"path":"https://jonesor.github.io/mpmsim/articles/pca.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Exploring PCA space","text":"Several interesting analyses used MPMs many species explore life history strategies using principal components analysis (PCA). potential criticism studies underlying data biased towards certain taxa, life histories, biomes. unclear much bias influence observed patterns. therefore useful simulate realistic MPMs explore potential artefactual patterns emerge biased data. show mpmsim can help task enable exploration PCA space aid understanding life history strategies.","code":""},{"path":"https://jonesor.github.io/mpmsim/articles/pca.html","id":"simulating-data-for-a-pca","dir":"Articles","previous_headings":"","what":"Simulating data for a PCA","title":"Exploring PCA space","text":"Load required packages First use generate_mpm_set() simulate 50 matrices archetype 1 life history Takada et al. (2018). life history archetype one transition /stage possible individuals can progress retrogress rapidly. simulating matrices can placed CompadreDB object using cdb_build_cdb(). matrices reducible, leads analytical problems calculations. can filtered using cdb_flag() followed filter(). convenience, matrices can added compadreDB object like , turned regular data frame (tibble) like . proceeding calculation life history traits make new function, gt_lt, calculate generation time life table. Now can use combination sapply mapply calculate life history traits matrix model. Now added variables data set can extract dataset PCA. can run PCA, add first two principle components data frame plotting purposes. plot can made using autoplot, ggfortify package.  PCA loadings show two strong axes. One evolutionary entropy, longevity, generation time life expectancy aligned, one R0 . Life table entropy aligned less equally . rather different pattern can observed real data. ?","code":"library(mpmsim) library(Rage) library(Rcompadre) library(dplyr) library(ggfortify) library(viridis) library(popbio) set.seed(42) constrain_df <- data.frame(fun = \"lambda\", arg = NA, lower = 0.9, upper = 1.1) mpm_set <- generate_mpm_set(   n = 50, n_stages = 3, fecundity = c(0, 6, 6), archetype = 1, split = TRUE,   max_surv = 0.95, constraint = constrain_df )  sim_life_hist_1 <- cdb_build_cdb(mat_u = mpm_set$U_list, mat_f = mpm_set$F_list) #> Warning in cdb_build_cdb(mat_u = mpm_set$U_list, mat_f = mpm_set$F_list): #> Metadata does not include a `SpeciesAccepted` column, so number of species not #> provided when viewing object. sim_life_hist_1 <- cdb_flag(sim_life_hist_1, checks = \"check_irreducible\") %>%   filter(check_irreducible == TRUE) # Put the matrices into the metadata sim_life_hist_1$matA <- matA(sim_life_hist_1) sim_life_hist_1$matU <- matU(sim_life_hist_1) sim_life_hist_1$matF <- matF(sim_life_hist_1)  # Use cdb_metadata to turn this into a data frame sim_life_hist_1 <- cdb_metadata(sim_life_hist_1) # New functions to calculate generation time from life table. # Function to calculate generation time from the life table gt_lt <- function(matU, matF, start = 1, ...) {   tempLT <- mpm_to_table(matU, matF, start = start, ...)   return(sum(tempLT$x * tempLT$lxmx) / sum(tempLT$lxmx)) } sim_life_hist_1$gt_lt <- mapply(gt_lt, sim_life_hist_1$matU, sim_life_hist_1$matF) sim_life_hist_1$longevity <- sapply(sim_life_hist_1$matU, Rage::longevity,   x_max = 1000, lx_crit = 0.01 ) sim_life_hist_1$lifeExpect <- sapply(sim_life_hist_1$matU, Rage::life_expect_mean) sim_life_hist_1$entropy_d <- mapply(   entropy_d, sim_life_hist_1$matU,   sim_life_hist_1$matF ) sim_life_hist_1$entropy_k <- mapply(entropy_k, sim_life_hist_1$matU) sim_life_hist_1$nrr_R0 <- mapply(   net_repro_rate, sim_life_hist_1$matU,   sim_life_hist_1$matF ) pcData <- sim_life_hist_1 %>%   select(gt_lt, longevity, lifeExpect, entropy_d, entropy_k, nrr_R0) %>%   na.omit() PCA <- prcomp(pcData, scale = TRUE, center = TRUE)  # Add the PC data to the raw data. pcData <- pcData %>%   cbind(PCA$x[, 1:2]) PCA_plot <- autoplot(   object = PCA, alpha = 0, size = 4, fill = \"#55616D60\",   loadings.colour = \"#0072B2\", shape = 16,   loadings = TRUE, loadings.label = TRUE, loadings.label.colour = \"red\",   loadings.label.size = 3, loadings.label.repel = TRUE,   frame = FALSE, frame.type = \"norm\", scale = 0 )  PCA_plot$layers <- c(   geom_point(     aes_(       x = pcData$PC1,       y = pcData$PC2     ),     size = 2, alpha = .5   ),   PCA_plot$layers )  PCA_plot"},{"path":"https://jonesor.github.io/mpmsim/articles/pca.html","id":"repeating-with-a-different-archetype","dir":"Articles","previous_headings":"","what":"Repeating with a different archetype","title":"Exploring PCA space","text":"repeat whole analysis different archetype (4) get following plot.","code":""},{"path":"https://jonesor.github.io/mpmsim/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Owen Jones. Author, maintainer.","code":""},{"path":"https://jonesor.github.io/mpmsim/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Jones O (2023). mpmsim: Simulates Matrix Population Models Particular Life History Characteristics. R package version 0.1.0.9000, https://github.com/jonesor/mpmsim.","code":"@Manual{,   title = {mpmsim: Simulates Matrix Population Models with Particular Life History Characteristics},   author = {Owen Jones},   year = {2023},   note = {R package version 0.1.0.9000},   url = {https://github.com/jonesor/mpmsim}, }"},{"path":"https://jonesor.github.io/mpmsim/index.html","id":"mpmsim-","dir":"","previous_headings":"","what":"Simulates Matrix Population Models with Particular Life History\n    Characteristics","title":"Simulates Matrix Population Models with Particular Life History\n    Characteristics","text":"mpmsim contains tools generating random semi-random matrix population models (MPMs) given particular life history archetype. also facilitates generation Leslie matrices, simulation MPMs based expected transition rates sample sizes. can useful exploring uncertainty inferences sample sizes small (unknown).","code":""},{"path":"https://jonesor.github.io/mpmsim/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Simulates Matrix Population Models with Particular Life History\n    Characteristics","text":"can install development version mpmsim like :","code":"# install package 'remotes' if necessary # will already be installed if 'devtools' is installed install.packages(\"remotes\")  # argument 'build_opts = NULL' only needed if you want to build vignettes remotes::install_github(\"jonesor/mpmsim\", build_opts = NULL)"},{"path":"https://jonesor.github.io/mpmsim/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Simulates Matrix Population Models with Particular Life History\n    Characteristics","text":"First, load package.","code":"library(mpmsim)"},{"path":"https://jonesor.github.io/mpmsim/index.html","id":"generate-a-leslie-matrix","dir":"","previous_headings":"Usage","what":"Generate a Leslie matrix","title":"Simulates Matrix Population Models with Particular Life History\n    Characteristics","text":"make_leslie_mpm function can used generate Leslie matrix, stages represent discrete age classes. Leslie matrix, survival represented lower sub-diagonal lower-right-hand corner element, fertility shown top row. survival fertility length equal number stages model. Users can specify survival fertility either single value vector values, length equal dimensions matrix model. arguments single values, value repeated along survival/fertility sequence.","code":"make_leslie_mpm(   survival = seq(0.1, 0.45, length.out = 4),   fertility = c(0, 0, 2.4, 5), n_stages = 4, split = FALSE ) #>      [,1]      [,2]      [,3] [,4] #> [1,]  0.0 0.0000000 2.4000000 5.00 #> [2,]  0.1 0.0000000 0.0000000 0.00 #> [3,]  0.0 0.2166667 0.0000000 0.00 #> [4,]  0.0 0.0000000 0.3333333 0.45"},{"path":"https://jonesor.github.io/mpmsim/index.html","id":"using-a-functional-form-for-mortality","dir":"","previous_headings":"Usage","what":"Using a functional form for mortality","title":"Simulates Matrix Population Models with Particular Life History\n    Characteristics","text":"Users can generate Leslie matrices particular functional forms mortality first making data frame simplified life table includes age survival probability within age interval. Age-specific survival probability given px column output model_survival. Users can also use functional form fertility (see model_fertility) simple step function assumed. Subsequently, survival fertility values can applied Leslie matrix follows.","code":"(surv_prob <- model_survival(params = c(0.2, 0.4), model = \"Gompertz\")) #>   x        hx         lx        qx        px #> 1 0 0.2000000 1.00000000 0.2205623 0.7794377 #> 2 1 0.2983649 0.77943774 0.3104641 0.6895359 #> 3 2 0.4451082 0.53745028 0.4256784 0.5743216 #> 4 3 0.6640234 0.30866930 0.5627783 0.4372217 #> 5 4 0.9906065 0.13495691 0.7089351 0.2910649 #> 6 5 1.4778112 0.03928123 0.8413767 0.1586233 survival <- surv_prob$px fertility <- model_fertility(   age = 0:(length(survival) - 1),   params = c(A = 5), maturity = 2, model = \"step\" ) make_leslie_mpm(   survival = survival, fertility = fertility,   n_stages = length(survival), split = FALSE ) #>           [,1]      [,2]      [,3]      [,4]      [,5]      [,6] #> [1,] 0.0000000 0.0000000 5.0000000 5.0000000 5.0000000 5.0000000 #> [2,] 0.7794377 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [3,] 0.0000000 0.6895359 0.0000000 0.0000000 0.0000000 0.0000000 #> [4,] 0.0000000 0.0000000 0.5743216 0.0000000 0.0000000 0.0000000 #> [5,] 0.0000000 0.0000000 0.0000000 0.4372217 0.0000000 0.0000000 #> [6,] 0.0000000 0.0000000 0.0000000 0.0000000 0.2910649 0.1586233"},{"path":"https://jonesor.github.io/mpmsim/index.html","id":"sets-of-leslie-matrices","dir":"","previous_headings":"Usage","what":"Sets of Leslie matrices","title":"Simulates Matrix Population Models with Particular Life History\n    Characteristics","text":"Users can generate large numbers plausible Leslie matrices repeating make_leslie_mpm command loop. example, following code produces list five Leslie matrices increasing survival age. ’s one way similar thing uncertainty applied Gompertz mortality.","code":"sample_size <- 5 juvSurv <- runif(n = sample_size, min = 0.0, max = 0.1) adultSurv <- runif(n = sample_size, min = 0.4, max = 0.8) adultFert <- rpois(sample_size, 6)  outputMPMs <- NULL for (i in 1:sample_size) {   outputMPMs[[i]] <- make_leslie_mpm(     survival = seq(juvSurv[i], adultSurv[i], length.out = 6),     fertility = c(0, 0, rep(adultFert[i], 4)), n_stages = 6, split = FALSE   ) }  outputMPMs #> [[1]] #>           [,1]      [,2]      [,3]      [,4]      [,5]      [,6] #> [1,] 0.0000000 0.0000000 6.0000000 6.0000000 6.0000000 6.0000000 #> [2,] 0.0914806 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [3,] 0.0000000 0.1947122 0.0000000 0.0000000 0.0000000 0.0000000 #> [4,] 0.0000000 0.0000000 0.2979437 0.0000000 0.0000000 0.0000000 #> [5,] 0.0000000 0.0000000 0.0000000 0.4011753 0.0000000 0.0000000 #> [6,] 0.0000000 0.0000000 0.0000000 0.0000000 0.5044068 0.6076384 #>  #> [[2]] #>            [,1]      [,2]      [,3]      [,4]      [,5]      [,6] #> [1,] 0.00000000 0.0000000 7.0000000 7.0000000 7.0000000 7.0000000 #> [2,] 0.09370754 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [3,] 0.00000000 0.2138931 0.0000000 0.0000000 0.0000000 0.0000000 #> [4,] 0.00000000 0.0000000 0.3340787 0.0000000 0.0000000 0.0000000 #> [5,] 0.00000000 0.0000000 0.0000000 0.4542642 0.0000000 0.0000000 #> [6,] 0.00000000 0.0000000 0.0000000 0.0000000 0.5744498 0.6946353 #>  #> [[3]] #>            [,1]      [,2]      [,3]       [,4]       [,5]       [,6] #> [1,] 0.00000000 0.0000000 10.000000 10.0000000 10.0000000 10.0000000 #> [2,] 0.02861395 0.0000000  0.000000  0.0000000  0.0000000  0.0000000 #> [3,] 0.00000000 0.1136645  0.000000  0.0000000  0.0000000  0.0000000 #> [4,] 0.00000000 0.0000000  0.198715  0.0000000  0.0000000  0.0000000 #> [5,] 0.00000000 0.0000000  0.000000  0.2837656  0.0000000  0.0000000 #> [6,] 0.00000000 0.0000000  0.000000  0.0000000  0.3688161  0.4538666 #>  #> [[4]] #>            [,1]      [,2]      [,3]      [,4]      [,5]      [,6] #> [1,] 0.00000000 0.0000000 4.0000000 4.0000000 4.0000000 4.0000000 #> [2,] 0.08304476 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [3,] 0.00000000 0.1989952 0.0000000 0.0000000 0.0000000 0.0000000 #> [4,] 0.00000000 0.0000000 0.3149456 0.0000000 0.0000000 0.0000000 #> [5,] 0.00000000 0.0000000 0.0000000 0.4308961 0.0000000 0.0000000 #> [6,] 0.00000000 0.0000000 0.0000000 0.0000000 0.5468465 0.6627969 #>  #> [[5]] #>            [,1]      [,2]      [,3]      [,4]      [,5]      [,6] #> [1,] 0.00000000 0.0000000 6.0000000 6.0000000 6.0000000 6.0000000 #> [2,] 0.06417455 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [3,] 0.00000000 0.1877448 0.0000000 0.0000000 0.0000000 0.0000000 #> [4,] 0.00000000 0.0000000 0.3113151 0.0000000 0.0000000 0.0000000 #> [5,] 0.00000000 0.0000000 0.0000000 0.4348854 0.0000000 0.0000000 #> [6,] 0.00000000 0.0000000 0.0000000 0.0000000 0.5584556 0.6820259 sample_size <- 5 b0_values <- rnorm(n = sample_size, mean = 0.3, sd = 0.1) b1_values <- rnorm(n = sample_size, mean = 0.4, sd = 0.1) fertility_values <- rnorm(n = sample_size, mean = 3, sd = 1)  outputMPMs <- NULL for (i in 1:sample_size) {   surv_prob <- model_survival(     params = c(b0_values[i], b1_values[i]),     model = \"Gompertz\"   )   survival <- surv_prob$px    maturity <- 2   fertility <- c(     rep(0, maturity),     rep(fertility_values[i], length(survival) - maturity)   )    outputMPMs[[i]] <- make_leslie_mpm(     survival = survival, fertility = fertility,     n_stages = length(survival), split = FALSE   ) }  outputMPMs #> [[1]] #>           [,1]      [,2]      [,3]      [,4]       [,5] #> [1,] 0.0000000 0.0000000 3.9657529 3.9657529 3.96575288 #> [2,] 0.5662538 0.0000000 0.0000000 0.0000000 0.00000000 #> [3,] 0.0000000 0.4267964 0.0000000 0.0000000 0.00000000 #> [4,] 0.0000000 0.0000000 0.2795021 0.0000000 0.00000000 #> [5,] 0.0000000 0.0000000 0.0000000 0.1483049 0.05742431 #>  #> [[2]] #>           [,1]      [,2]      [,3]      [,4]      [,5] #> [1,] 0.0000000 0.0000000 2.1854291 2.1854291 2.1854291 #> [2,] 0.7828594 0.0000000 0.0000000 0.0000000 0.0000000 #> [3,] 0.0000000 0.6593341 0.0000000 0.0000000 0.0000000 #> [4,] 0.0000000 0.0000000 0.4922804 0.0000000 0.0000000 #> [5,] 0.0000000 0.0000000 0.0000000 0.2994381 0.1285137 #>  #> [[3]] #>           [,1]      [,2]      [,3]      [,4]       [,5] #> [1,] 0.0000000 0.0000000 3.2839578 3.2839578 3.28395781 #> [2,] 0.6591217 0.0000000 0.0000000 0.0000000 0.00000000 #> [3,] 0.0000000 0.5037044 0.0000000 0.0000000 0.00000000 #> [4,] 0.0000000 0.0000000 0.3236247 0.0000000 0.00000000 #> [5,] 0.0000000 0.0000000 0.0000000 0.1562993 0.04720172 #>  #> [[4]] #>           [,1]      [,2]      [,3]      [,4]      [,5]       [,6] #> [1,] 0.0000000 0.0000000 2.8383014 2.8383014 2.8383014 2.83830135 #> [2,] 0.7775471 0.0000000 0.0000000 0.0000000 0.0000000 0.00000000 #> [3,] 0.0000000 0.6636757 0.0000000 0.0000000 0.0000000 0.00000000 #> [4,] 0.0000000 0.0000000 0.5127486 0.0000000 0.0000000 0.00000000 #> [5,] 0.0000000 0.0000000 0.0000000 0.3367703 0.0000000 0.00000000 #> [6,] 0.0000000 0.0000000 0.0000000 0.0000000 0.1697708 0.05561344 #>  #> [[5]] #>           [,1]      [,2]      [,3]      [,4] #> [1,] 0.0000000 0.0000000 4.9355718 4.9355718 #> [2,] 0.5533382 0.0000000 0.0000000 0.0000000 #> [3,] 0.0000000 0.3959549 0.0000000 0.0000000 #> [4,] 0.0000000 0.0000000 0.2344795 0.1032486"},{"path":"https://jonesor.github.io/mpmsim/index.html","id":"simulate-sampling-error-for-an-mpm","dir":"","previous_headings":"Usage","what":"Simulate sampling error for an MPM","title":"Simulates Matrix Population Models with Particular Life History\n    Characteristics","text":"function add_mpm_error can used simulate MPM sampling error, based expected transition rates (survival fecundity) sample sizes. expected transition rates must provided matrices. sample size(s) can given either matrix sample sizes element matrix single value applied elements matrix. function uses binomial process simulate survival/growth elements Poisson process simulate fecundity elements. result, sample sizes large, simulated MPM closely reflect expected transition rates. contrast, sample sizes small, simulated matrices become variable. illustrate use function, following code first generates 3-stage Leslie matrix using make_leslie_mpm function. passes U F matrices Leslie matrix add_mpm_error function. , two matrices simulated, first sample size 1000, sample size seven. list arbitrary number matrices can generated easily using replicate, follows.","code":"mats <- make_leslie_mpm(   survival = c(0.3, 0.5, 0.8),   fertility = c(0, 2.2, 4.4),   n_stages = 3, split = TRUE )  add_mpm_error(   mat_U = mats$mat_U, mat_F = mats$mat_F,   sample_size = 1000, split = FALSE, by_type = FALSE ) #>       [,1]  [,2]  [,3] #> [1,] 0.000 2.255 4.482 #> [2,] 0.287 0.000 0.000 #> [3,] 0.000 0.507 0.794  add_mpm_error(   mat_U = mats$mat_U, mat_F = mats$mat_F,   sample_size = 7, split = FALSE, by_type = FALSE ) #>           [,1]      [,2]     [,3] #> [1,] 0.0000000 1.8571429 4.714286 #> [2,] 0.4285714 0.0000000 0.000000 #> [3,] 0.0000000 0.7142857 1.000000 replicate(   n = 5,   add_mpm_error(     mat_U = mats$mat_U, mat_F = mats$mat_F,     sample_size = 7, split = FALSE, by_type = FALSE   ) ) #> , , 1 #>  #>      [,1]      [,2]      [,3] #> [1,]    0 1.5714286 4.1428571 #> [2,]    0 0.0000000 0.0000000 #> [3,]    0 0.4285714 0.7142857 #>  #> , , 2 #>  #>           [,1]      [,2]      [,3] #> [1,] 0.0000000 2.2857143 5.5714286 #> [2,] 0.7142857 0.0000000 0.0000000 #> [3,] 0.0000000 0.5714286 0.7142857 #>  #> , , 3 #>  #>           [,1]      [,2]      [,3] #> [1,] 0.0000000 2.1428571 4.4285714 #> [2,] 0.1428571 0.0000000 0.0000000 #> [3,] 0.0000000 0.5714286 0.5714286 #>  #> , , 4 #>  #>           [,1]      [,2]      [,3] #> [1,] 0.0000000 1.7142857 4.0000000 #> [2,] 0.7142857 0.0000000 0.0000000 #> [3,] 0.0000000 0.5714286 0.8571429 #>  #> , , 5 #>  #>           [,1]      [,2]      [,3] #> [1,] 0.0000000 2.5714286 4.5714286 #> [2,] 0.4285714 0.0000000 0.0000000 #> [3,] 0.0000000 0.4285714 0.7142857"},{"path":"https://jonesor.github.io/mpmsim/index.html","id":"generate-single-random-lefkovitch-mpms","dir":"","previous_headings":"Usage","what":"Generate single random Lefkovitch MPMs","title":"Simulates Matrix Population Models with Particular Life History\n    Characteristics","text":"random_mpm function can used generate random Lefkovitch matrix population model (MPM) element values based defined life history archetypes. function draws survival transition/growth probabilities Dirichlet distribution ensure column totals, including death, less equal 1. Fecundity can specified single value vector length equal dimensions matrix. specified single value, placed top-right corner matrix. specified vector length n_stages, spans entire top row matrix. archetype argument can used constrain MPMs, example, archetype = 2 constraints survival probability increase monotonically individuals advance later stages. information, see documentation random_mpm Takada et al. (2018). following example, split output matrices U F matrices, summed create matrix.","code":"(rMPM <- random_mpm(   n_stages = 3, fecundity = 20,   archetype = 2, split = TRUE )) #> $mat_A #>            [,1]        [,2]       [,3] #> [1,] 0.01566286 0.003962617 18.2372038 #> [2,] 0.19165445 0.447044844  0.1369993 #> [3,] 0.25834510 0.111258159  0.3916082 #>  #> $mat_U #>            [,1]        [,2]      [,3] #> [1,] 0.01566286 0.003962617 0.2372038 #> [2,] 0.19165445 0.447044844 0.1369993 #> [3,] 0.25834510 0.111258159 0.3916082 #>  #> $mat_F #>      [,1] [,2] [,3] #> [1,]    0    0   18 #> [2,]    0    0    0 #> [3,]    0    0    0"},{"path":"https://jonesor.github.io/mpmsim/index.html","id":"generate-a-set-of-random-lefkovitch-mpms","dir":"","previous_headings":"Usage","what":"Generate a set of random Lefkovitch MPMs","title":"Simulates Matrix Population Models with Particular Life History\n    Characteristics","text":"generate_mpm_set function can used quickly generate large numbers Lefkovitch MPMs using approach. example, following code generates five MPMs archetype 1. using constraint argument, users can specify acceptable characteristics set matrices. case, population growth rate range, can useful life history analyses might assume life histories lambda values close 1 can persist nature.","code":"library(popbio) constrain_df <- data.frame(fun = \"lambda\", arg = NA, lower = 0.9, upper = 1.1) generate_mpm_set(   n = 5, n_stages = 4, fecundity = 8, archetype = 1, constraint = constrain_df ) #> $A_list #> $A_list[[1]] #>             [,1]       [,2]       [,3]      [,4] #> [1,] 0.683817095 0.07436408 0.40352369 3.0190505 #> [2,] 0.065426834 0.57796228 0.03221829 0.1655543 #> [3,] 0.002387016 0.24212237 0.07486204 0.5271301 #> [4,] 0.064758332 0.01273125 0.05122861 0.2238208 #>  #> $A_list[[2]] #>             [,1]      [,2]       [,3]       [,4] #> [1,] 0.004719656 0.3348849 0.40387912 6.27662294 #> [2,] 0.128065308 0.3286158 0.09015260 0.09244601 #> [3,] 0.427166249 0.1241865 0.23033102 0.10502351 #> [4,] 0.019221780 0.1375705 0.08540422 0.07442567 #>  #> $A_list[[3]] #>            [,1]       [,2]       [,3]      [,4] #> [1,] 0.13142886 0.56014076 0.03765468 8.2803291 #> [2,] 0.47796787 0.20166801 0.12569645 0.1171839 #> [3,] 0.01832387 0.00426959 0.66699351 0.3060712 #> [4,] 0.01184625 0.09086567 0.09119377 0.0438874 #>  #> $A_list[[4]] #>            [,1]        [,2]       [,3]       [,4] #> [1,] 0.23046148 0.183227044 0.68851806 6.36699301 #> [2,] 0.09507294 0.001175577 0.07291332 0.11467588 #> [3,] 0.50611523 0.262006976 0.12849628 0.01109936 #> [4,] 0.01556241 0.107666011 0.04314266 0.05970144 #>  #> $A_list[[5]] #>             [,1]       [,2]        [,3]       [,4] #> [1,] 0.124409734 0.16562576 0.005851048 9.19474143 #> [2,] 0.109222906 0.01030503 0.359592193 0.17404735 #> [3,] 0.007652419 0.39395405 0.491292690 0.51713935 #> [4,] 0.011558679 0.29005229 0.074311694 0.01453069 #>  #>  #> $U_list #> $U_list[[1]] #>             [,1]       [,2]       [,3]      [,4] #> [1,] 0.683817095 0.07436408 0.40352369 0.0190505 #> [2,] 0.065426834 0.57796228 0.03221829 0.1655543 #> [3,] 0.002387016 0.24212237 0.07486204 0.5271301 #> [4,] 0.064758332 0.01273125 0.05122861 0.2238208 #>  #> $U_list[[2]] #>             [,1]      [,2]       [,3]       [,4] #> [1,] 0.004719656 0.3348849 0.40387912 0.27662294 #> [2,] 0.128065308 0.3286158 0.09015260 0.09244601 #> [3,] 0.427166249 0.1241865 0.23033102 0.10502351 #> [4,] 0.019221780 0.1375705 0.08540422 0.07442567 #>  #> $U_list[[3]] #>            [,1]       [,2]       [,3]      [,4] #> [1,] 0.13142886 0.56014076 0.03765468 0.2803291 #> [2,] 0.47796787 0.20166801 0.12569645 0.1171839 #> [3,] 0.01832387 0.00426959 0.66699351 0.3060712 #> [4,] 0.01184625 0.09086567 0.09119377 0.0438874 #>  #> $U_list[[4]] #>            [,1]        [,2]       [,3]       [,4] #> [1,] 0.23046148 0.183227044 0.68851806 0.36699301 #> [2,] 0.09507294 0.001175577 0.07291332 0.11467588 #> [3,] 0.50611523 0.262006976 0.12849628 0.01109936 #> [4,] 0.01556241 0.107666011 0.04314266 0.05970144 #>  #> $U_list[[5]] #>             [,1]       [,2]        [,3]       [,4] #> [1,] 0.124409734 0.16562576 0.005851048 0.19474143 #> [2,] 0.109222906 0.01030503 0.359592193 0.17404735 #> [3,] 0.007652419 0.39395405 0.491292690 0.51713935 #> [4,] 0.011558679 0.29005229 0.074311694 0.01453069 #>  #>  #> $F_list #> $F_list[[1]] #>      [,1] [,2] [,3] [,4] #> [1,]    0    0    0    3 #> [2,]    0    0    0    0 #> [3,]    0    0    0    0 #> [4,]    0    0    0    0 #>  #> $F_list[[2]] #>      [,1] [,2] [,3] [,4] #> [1,]    0    0    0    6 #> [2,]    0    0    0    0 #> [3,]    0    0    0    0 #> [4,]    0    0    0    0 #>  #> $F_list[[3]] #>      [,1] [,2] [,3] [,4] #> [1,]    0    0    0    8 #> [2,]    0    0    0    0 #> [3,]    0    0    0    0 #> [4,]    0    0    0    0 #>  #> $F_list[[4]] #>      [,1] [,2] [,3] [,4] #> [1,]    0    0    0    6 #> [2,]    0    0    0    0 #> [3,]    0    0    0    0 #> [4,]    0    0    0    0 #>  #> $F_list[[5]] #>      [,1] [,2] [,3] [,4] #> [1,]    0    0    0    9 #> [2,]    0    0    0    0 #> [3,]    0    0    0    0 #> [4,]    0    0    0    0"},{"path":"https://jonesor.github.io/mpmsim/index.html","id":"plot-a-matrix","dir":"","previous_headings":"Usage","what":"Plot a matrix","title":"Simulates Matrix Population Models with Particular Life History\n    Characteristics","text":"can helpful visualise matrices. can accomplished function plot_matrix. output plot_matrix class ggplot colour scheme can modified usual way , example, scale_fill_gradient similar. ’s matrix: ’s plot:","code":"rMPM$mat_U #>            [,1]        [,2]      [,3] #> [1,] 0.01566286 0.003962617 0.2372038 #> [2,] 0.19165445 0.447044844 0.1369993 #> [3,] 0.25834510 0.111258159 0.3916082 p <- plot_matrix(rMPM$mat_U) p + ggplot2::scale_fill_gradient(low = \"black\", high = \"yellow\")"},{"path":"https://jonesor.github.io/mpmsim/index.html","id":"contributions","dir":"","previous_headings":"","what":"Contributions","title":"Simulates Matrix Population Models with Particular Life History\n    Characteristics","text":"contributions welcome. Please note project released Contributor Code Conduct. participating project agree abide terms. numerous ways contributing. can submit bug reports, suggestions etc. opening issue. can copy fork repository, make code edits send us pull request. ’s . also welcome email .","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/add_mpm_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Add sampling error to matrix population models (MPMs) based on expected\nvalues of transition rates and sample sizes — add_mpm_error","title":"Add sampling error to matrix population models (MPMs) based on expected\nvalues of transition rates and sample sizes — add_mpm_error","text":"Produces list matrix population models based expected values transition matrix sample size. expected values provided lists two submatrices: mat_U growth/development survival transitions mat_F fecundity transitions. output mat_U values simulated based expected probabilities, assuming binomial process sample size defined sample_size. output mat_F values simulated using Poisson process sample size defined sample_size.Thus users can expect large sample sizes result simulated matrices match closely expectations, simulated matrices small sample sizes variable.","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/add_mpm_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add sampling error to matrix population models (MPMs) based on expected\nvalues of transition rates and sample sizes — add_mpm_error","text":"","code":"add_mpm_error(mat_U, mat_F, sample_size, split = TRUE, by_type = TRUE)"},{"path":"https://jonesor.github.io/mpmsim/reference/add_mpm_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add sampling error to matrix population models (MPMs) based on expected\nvalues of transition rates and sample sizes — add_mpm_error","text":"mat_U list U submatrices, single U submatrix. mat_F list F submatrices, single F submatrix. sample_size either (1) single matrix sample sizes element every MPM, (2) list two named matrices (\"mat_F_ss\", \"mat_U_ss\") containing sample sizes survival fertility submatrices every MPM (3) single value applied every element every matrix. split logical, whether split output survival fecundity matrices . Defaults TRUE. by_type logical indicating whether matrices returned list type (, U, F, C). split FALSE, by_type must also FALSE. Defaults TRUE.","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/add_mpm_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add sampling error to matrix population models (MPMs) based on expected\nvalues of transition rates and sample sizes — add_mpm_error","text":"list matrices survival fecundity split = TRUE, otherwise single matrix sum survival fecundity.","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/add_mpm_error.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add sampling error to matrix population models (MPMs) based on expected\nvalues of transition rates and sample sizes — add_mpm_error","text":"sample_size input 0, assumed estimate element(s) concerned known without error.","code":""},{"path":[]},{"path":"https://jonesor.github.io/mpmsim/reference/add_mpm_error.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add sampling error to matrix population models (MPMs) based on expected\nvalues of transition rates and sample sizes — add_mpm_error","text":"Owen Jones jones@biology.sdu.dk","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/add_mpm_error.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add sampling error to matrix population models (MPMs) based on expected\nvalues of transition rates and sample sizes — add_mpm_error","text":"","code":"# First generate a set of MPMs mpm_set <- generate_mpm_set(n = 5, n_stages = 5, fecundity = c(   0, 0, 4, 8,   10 ), archetype = 4, split = TRUE, by_type = TRUE)  # Now apply sampling error to this set add_mpm_error(   mat_U = mpm_set$U_list, mat_F = mpm_set$F_list, sample_size =     50 ) #> $A_list #> $A_list[[1]] #>      [,1] [,2] [,3] [,4]  [,5] #> [1,] 0.26 0.00 3.88 4.16 14.58 #> [2,] 0.02 0.20 0.00 0.00  0.00 #> [3,] 0.00 0.52 0.02 0.00  0.00 #> [4,] 0.00 0.00 0.88 0.22  0.00 #> [5,] 0.00 0.00 0.00 0.60  0.98 #>  #> $A_list[[2]] #>      [,1] [,2] [,3] [,4]  [,5] #> [1,]  0.2 0.00 2.08 6.18 15.54 #> [2,]  0.2 0.30 0.00 0.00  0.00 #> [3,]  0.0 0.34 0.50 0.00  0.00 #> [4,]  0.0 0.00 0.28 0.40  0.00 #> [5,]  0.0 0.00 0.00 0.52  0.88 #>  #> $A_list[[3]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,] 0.54 0.00 4.70 7.38 6.84 #> [2,] 0.06 0.06 0.00 0.00 0.00 #> [3,] 0.00 0.58 0.54 0.00 0.00 #> [4,] 0.00 0.00 0.18 0.18 0.00 #> [5,] 0.00 0.00 0.00 0.74 1.00 #>  #> $A_list[[4]] #>      [,1] [,2] [,3] [,4]  [,5] #> [1,] 0.04 0.00 0.00 9.54 11.98 #> [2,] 0.08 0.20 0.00 0.00  0.00 #> [3,] 0.00 0.38 0.48 0.00  0.00 #> [4,] 0.00 0.00 0.28 0.86  0.00 #> [5,] 0.00 0.00 0.00 0.04  0.94 #>  #> $A_list[[5]] #>      [,1] [,2] [,3] [,4]  [,5] #> [1,] 0.22 0.00 3.08 6.96 12.24 #> [2,] 0.46 0.18 0.00 0.00  0.00 #> [3,] 0.00 0.88 0.14 0.00  0.00 #> [4,] 0.00 0.00 0.74 0.94  0.00 #> [5,] 0.00 0.00 0.00 0.02  1.00 #>  #>  #> $U_list #> $U_list[[1]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,] 0.26 0.00 0.00 0.00 0.00 #> [2,] 0.02 0.20 0.00 0.00 0.00 #> [3,] 0.00 0.52 0.02 0.00 0.00 #> [4,] 0.00 0.00 0.88 0.22 0.00 #> [5,] 0.00 0.00 0.00 0.60 0.98 #>  #> $U_list[[2]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]  0.2 0.00 0.00 0.00 0.00 #> [2,]  0.2 0.30 0.00 0.00 0.00 #> [3,]  0.0 0.34 0.50 0.00 0.00 #> [4,]  0.0 0.00 0.28 0.40 0.00 #> [5,]  0.0 0.00 0.00 0.52 0.88 #>  #> $U_list[[3]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,] 0.54 0.00 0.00 0.00    0 #> [2,] 0.06 0.06 0.00 0.00    0 #> [3,] 0.00 0.58 0.54 0.00    0 #> [4,] 0.00 0.00 0.18 0.18    0 #> [5,] 0.00 0.00 0.00 0.74    1 #>  #> $U_list[[4]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,] 0.04 0.00 0.00 0.00 0.00 #> [2,] 0.08 0.20 0.00 0.00 0.00 #> [3,] 0.00 0.38 0.48 0.00 0.00 #> [4,] 0.00 0.00 0.28 0.86 0.00 #> [5,] 0.00 0.00 0.00 0.04 0.94 #>  #> $U_list[[5]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,] 0.22 0.00 0.00 0.00    0 #> [2,] 0.46 0.18 0.00 0.00    0 #> [3,] 0.00 0.88 0.14 0.00    0 #> [4,] 0.00 0.00 0.74 0.94    0 #> [5,] 0.00 0.00 0.00 0.02    1 #>  #>  #> $F_list #> $F_list[[1]] #>      [,1] [,2] [,3] [,4]  [,5] #> [1,]    0    0 3.88 4.16 14.58 #> [2,]    0    0 0.00 0.00  0.00 #> [3,]    0    0 0.00 0.00  0.00 #> [4,]    0    0 0.00 0.00  0.00 #> [5,]    0    0 0.00 0.00  0.00 #>  #> $F_list[[2]] #>      [,1] [,2] [,3] [,4]  [,5] #> [1,]    0    0 2.08 6.18 15.54 #> [2,]    0    0 0.00 0.00  0.00 #> [3,]    0    0 0.00 0.00  0.00 #> [4,]    0    0 0.00 0.00  0.00 #> [5,]    0    0 0.00 0.00  0.00 #>  #> $F_list[[3]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0  4.7 7.38 6.84 #> [2,]    0    0  0.0 0.00 0.00 #> [3,]    0    0  0.0 0.00 0.00 #> [4,]    0    0  0.0 0.00 0.00 #> [5,]    0    0  0.0 0.00 0.00 #>  #> $F_list[[4]] #>      [,1] [,2] [,3] [,4]  [,5] #> [1,]    0    0    0 9.54 11.98 #> [2,]    0    0    0 0.00  0.00 #> [3,]    0    0    0 0.00  0.00 #> [4,]    0    0    0 0.00  0.00 #> [5,]    0    0    0 0.00  0.00 #>  #> $F_list[[5]] #>      [,1] [,2] [,3] [,4]  [,5] #> [1,]    0    0 3.08 6.96 12.24 #> [2,]    0    0 0.00 0.00  0.00 #> [3,]    0    0 0.00 0.00  0.00 #> [4,]    0    0 0.00 0.00  0.00 #> [5,]    0    0 0.00 0.00  0.00 #>  #>   # Also works with a single matrix. mats <- make_leslie_mpm(   survival = c(0.1, 0.2, 0.5),   fertility = c(0, 1.2, 2.4),   n_stages = 3, split = TRUE )  # Sample size is a single value add_mpm_error(mat_U = mats$mat_U, mat_F = mats$mat_F, sample_size = 20) #> $mat_A #>      [,1] [,2] [,3] #> [1,] 0.00  1.3 2.30 #> [2,] 0.05  0.0 0.00 #> [3,] 0.00  0.1 0.45 #>  #> $mat_U #>      [,1] [,2] [,3] #> [1,] 0.00  0.0 0.00 #> [2,] 0.05  0.0 0.00 #> [3,] 0.00  0.1 0.45 #>  #> $mat_F #>      [,1] [,2] [,3] #> [1,]    0  1.3  2.3 #> [2,]    0  0.0  0.0 #> [3,]    0  0.0  0.0 #>   # Sample size is a list of two matrices # here with a sample size of 20 for reproduction and 10 for growth/survival. mpm_set <- generate_mpm_set(   n = 5, n_stages = 3, fecundity = c(0, 2, 4),   archetype = 4, split = TRUE, by_type = TRUE )  ssMats <- list(   \"mat_F_ss\" = matrix(20, nrow = 3, ncol = 3),   \"mat_U_ss\" = matrix(10, nrow = 3, ncol = 3) )  # Add sampling error to the matrix models output <- add_mpm_error(   mat_U = mpm_set$U_list, mat_F = mpm_set$F_list,   sample_size = ssMats )  # Examine the outputs names(output) #> [1] \"A_list\" \"U_list\" \"F_list\" output #> $A_list #> $A_list[[1]] #>      [,1] [,2] [,3] #> [1,]  0.8 1.05 4.05 #> [2,]  0.4 0.40 0.00 #> [3,]  0.0 0.50 1.00 #>  #> $A_list[[2]] #>      [,1] [,2] [,3] #> [1,]  0.4 2.05  4.6 #> [2,]  0.0 0.30  0.0 #> [3,]  0.0 0.40  1.0 #>  #> $A_list[[3]] #>      [,1] [,2] [,3] #> [1,]  0.1  1.7  2.0 #> [2,]  0.4  0.2  0.0 #> [3,]  0.0  0.8  0.6 #>  #> $A_list[[4]] #>      [,1] [,2] [,3] #> [1,]  0.2 1.85 0.55 #> [2,]  0.6 0.40 0.00 #> [3,]  0.0 0.40 0.90 #>  #> $A_list[[5]] #>      [,1] [,2] [,3] #> [1,]  0.2  2.6 7.55 #> [2,]  0.2  0.6 0.00 #> [3,]  0.0  0.3 1.00 #>  #>  #> $U_list #> $U_list[[1]] #>      [,1] [,2] [,3] #> [1,]  0.8  0.0    0 #> [2,]  0.4  0.4    0 #> [3,]  0.0  0.5    1 #>  #> $U_list[[2]] #>      [,1] [,2] [,3] #> [1,]  0.4  0.0    0 #> [2,]  0.0  0.3    0 #> [3,]  0.0  0.4    1 #>  #> $U_list[[3]] #>      [,1] [,2] [,3] #> [1,]  0.1  0.0  0.0 #> [2,]  0.4  0.2  0.0 #> [3,]  0.0  0.8  0.6 #>  #> $U_list[[4]] #>      [,1] [,2] [,3] #> [1,]  0.2  0.0  0.0 #> [2,]  0.6  0.4  0.0 #> [3,]  0.0  0.4  0.9 #>  #> $U_list[[5]] #>      [,1] [,2] [,3] #> [1,]  0.2  0.0    0 #> [2,]  0.2  0.6    0 #> [3,]  0.0  0.3    1 #>  #>  #> $F_list #> $F_list[[1]] #>      [,1] [,2] [,3] #> [1,]    0 1.05 4.05 #> [2,]    0 0.00 0.00 #> [3,]    0 0.00 0.00 #>  #> $F_list[[2]] #>      [,1] [,2] [,3] #> [1,]    0 2.05  4.6 #> [2,]    0 0.00  0.0 #> [3,]    0 0.00  0.0 #>  #> $F_list[[3]] #>      [,1] [,2] [,3] #> [1,]    0  1.7    2 #> [2,]    0  0.0    0 #> [3,]    0  0.0    0 #>  #> $F_list[[4]] #>      [,1] [,2] [,3] #> [1,]    0 1.85 0.55 #> [2,]    0 0.00 0.00 #> [3,]    0 0.00 0.00 #>  #> $F_list[[5]] #>      [,1] [,2] [,3] #> [1,]    0  2.6 7.55 #> [2,]    0  0.0 0.00 #> [3,]    0  0.0 0.00 #>  #>"},{"path":"https://jonesor.github.io/mpmsim/reference/calculate_errors.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate error (standard error or 95%CI) in elements of a matrix population\nmodel. — calculate_errors","title":"Calculate error (standard error or 95%CI) in elements of a matrix population\nmodel. — calculate_errors","text":"Given two submatrices matrix population model (mat_U mat_F, growth/survival matrix reproduction matrix respectively) sample size, matrix/matrices sample sizes, function calculates standard error 95% confidence interval (95%CI) element matrix. calculations assume mat_U result binomial processes (.e., survival (0/1) sample n individuals), mat_F result Poisson processes (.e., counts offspring n individuals), n sample size.","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/calculate_errors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate error (standard error or 95%CI) in elements of a matrix population\nmodel. — calculate_errors","text":"","code":"calculate_errors(mat_U, mat_F, sample_size, type = \"sem\", calculate_A = TRUE)"},{"path":"https://jonesor.github.io/mpmsim/reference/calculate_errors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate error (standard error or 95%CI) in elements of a matrix population\nmodel. — calculate_errors","text":"mat_U matrix mean survival probabilities mat_F matrix mean fecundity values sample_size either (1) single matrix sample sizes element MPM, (2) list two named matrices (\"mat_F_ss\", \"mat_U_ss\") containing sample sizes survival fertility submatrices MPM (3) single value applied whole matrix type character string indicating type error calculate. Must one \"sem\" (standard error), \"CI95\" (95% confidence interval). calculate_A logical argument indicating whether returned error information include matrix error. Defaults TRUE.","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/calculate_errors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate error (standard error or 95%CI) in elements of a matrix population\nmodel. — calculate_errors","text":"list containing original matrices error estimates (upper lower confidence intervals) U, F (optionally) matrices.","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/calculate_errors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate error (standard error or 95%CI) in elements of a matrix population\nmodel. — calculate_errors","text":"output list containing original matrices matrices showing error estimates confidence intervals.","code":""},{"path":[]},{"path":"https://jonesor.github.io/mpmsim/reference/calculate_errors.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate error (standard error or 95%CI) in elements of a matrix population\nmodel. — calculate_errors","text":"Owen Jones jones@biology.sdu.dk","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/calculate_errors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate error (standard error or 95%CI) in elements of a matrix population\nmodel. — calculate_errors","text":"","code":"# Set up two submatrices matU <- matrix(c(   0.1, 0,   0.2, 0.4 ), byrow = TRUE, nrow = 2) matF <- matrix(c(   0, 4,   0., 0. ), byrow = TRUE, nrow = 2)  # errors as 95% CI, with a sample size of 20 for all elements calculate_errors(mat_U = matU, mat_F = matF, sample_size = 20, type = \"CI95\") #> $mat_F #>      [,1] [,2] #> [1,]    0    4 #> [2,]    0    0 #>  #> $mat_F_lowerCI #>      [,1]     [,2] #> [1,]    0 3.123461 #> [2,]    0 0.000000 #>  #> $mat_F_upperCI #>      [,1]     [,2] #> [1,]    0 4.876539 #> [2,]    0 0.000000 #>  #> $mat_U #>      [,1] [,2] #> [1,]  0.1  0.0 #> [2,]  0.2  0.4 #>  #> $mat_U_lowerCI #>            [,1]      [,2] #> [1,] 0.00000000 0.0000000 #> [2,] 0.02469227 0.1852928 #>  #> $mat_U_upperCI #>           [,1]      [,2] #> [1,] 0.2314808 0.0000000 #> [2,] 0.3753077 0.6147072 #>  #> $mat_A #>      [,1] [,2] #> [1,]  0.1  4.0 #> [2,]  0.2  0.4 #>  #> $mat_A_lowerCI #>            [,1]      [,2] #> [1,] 0.00000000 3.1234614 #> [2,] 0.02469227 0.1852928 #>  #> $mat_A_upperCI #>           [,1]      [,2] #> [1,] 0.2314808 4.8765386 #> [2,] 0.3753077 0.6147072 #>   # errors as sem, with a sample size of 20 for all elements calculate_errors(mat_U = matU, mat_F = matF, sample_size = 20, type = \"sem\") #> $mat_U #>      [,1] [,2] #> [1,]  0.1  0.0 #> [2,]  0.2  0.4 #>  #> $`,mat_U_error` #>            [,1]      [,2] #> [1,] 0.06708204 0.0000000 #> [2,] 0.08944272 0.1095445 #>  #> $mat_F #>      [,1] [,2] #> [1,]    0    4 #> [2,]    0    0 #>  #> $mat_F_error #>      [,1]      [,2] #> [1,]    0 0.4472136 #> [2,]    0 0.0000000 #>  #> $mat_A #>      [,1] [,2] #> [1,]    0    4 #> [2,]    0    0 #>  #> $mat_A_error #>            [,1]      [,2] #> [1,] 0.06708204 0.4472136 #> [2,] 0.08944272 0.1095445 #>   # Sample size is a single matrix applied to both F and U matrices ssMat <- matrix(10, nrow = 2, ncol = 2)  calculate_errors(   mat_U = matU, mat_F = matF, sample_size = ssMat, type =     \"sem\" ) #> $mat_U #>      [,1] [,2] #> [1,]  0.1  0.0 #> [2,]  0.2  0.4 #>  #> $`,mat_U_error` #>            [,1]      [,2] #> [1,] 0.09486833 0.0000000 #> [2,] 0.12649111 0.1549193 #>  #> $mat_F #>      [,1] [,2] #> [1,]    0    4 #> [2,]    0    0 #>  #> $mat_F_error #>      [,1]      [,2] #> [1,]    0 0.6324555 #> [2,]    0 0.0000000 #>  #> $mat_A #>      [,1] [,2] #> [1,]    0    4 #> [2,]    0    0 #>  #> $mat_A_error #>            [,1]      [,2] #> [1,] 0.09486833 0.6324555 #> [2,] 0.12649111 0.1549193 #>   # Sample size is a list of two matrices, one for F and one for U. ssMats <- list(   \"mat_F_ss\" = matrix(10, nrow = 2, ncol = 2),   \"mat_U_ss\" = matrix(10, nrow = 2, ncol = 2) ) calculate_errors(   mat_U = matU, mat_F = matF, sample_size = ssMats, type =     \"sem\" ) #> $mat_U #>      [,1] [,2] #> [1,]  0.1  0.0 #> [2,]  0.2  0.4 #>  #> $`,mat_U_error` #>            [,1]      [,2] #> [1,] 0.09486833 0.0000000 #> [2,] 0.12649111 0.1549193 #>  #> $mat_F #>      [,1] [,2] #> [1,]    0    4 #> [2,]    0    0 #>  #> $mat_F_error #>      [,1]      [,2] #> [1,]    0 0.6324555 #> [2,]    0 0.0000000 #>  #> $mat_A #>      [,1] [,2] #> [1,]    0    4 #> [2,]    0    0 #>  #> $mat_A_error #>            [,1]      [,2] #> [1,] 0.09486833 0.6324555 #> [2,] 0.12649111 0.1549193 #>"},{"path":"https://jonesor.github.io/mpmsim/reference/compute_ci.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute 95% confidence intervals for derived estimates from a matrix\npopulation model — compute_ci","title":"Compute 95% confidence intervals for derived estimates from a matrix\npopulation model — compute_ci","text":"function computes 95% confidence interval measures derived matrix population model using parametric bootstrapping. approach sampling distribution matrix population model (MPM) generated taking large number random independent draws using sampling distribution underlying transition rate. approach rests assumption survival-related processes binomial, reproduction Poisson process (see function add_mpm_error() details).","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/compute_ci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute 95% confidence intervals for derived estimates from a matrix\npopulation model — compute_ci","text":"","code":"compute_ci(mat_U, mat_F, sample_size, FUN, ..., n_sim = 1000, dist.out = FALSE)"},{"path":"https://jonesor.github.io/mpmsim/reference/compute_ci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute 95% confidence intervals for derived estimates from a matrix\npopulation model — compute_ci","text":"mat_U matrix describes growth survival process. mat_F matrix describes reproduction. sample_size either (1) single matrix sample sizes element MPM, (2) list two named matrices (\"mat_F_ss\", \"mat_U_ss\") containing sample sizes survival fertility submatrices MPM (3) single value applied whole matrix FUN function apply simulated matrix population model. function must take, input, single matrix population model (.e., matrix). ... Additional arguments passed FUN. n_sim integer indicating number simulations run. Default 1000. dist.Logical. TRUE, returns list quantiles simulated estimates. Default FALSE.","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/compute_ci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute 95% confidence intervals for derived estimates from a matrix\npopulation model — compute_ci","text":"dist.FALSE, numeric vector 2.5th 97.5th quantiles estimated measures. dist.= TRUE, list two elements: quantiles estimates. quantiles numeric vector 2.5th 97.5th quantiles estimated measures, estimates numeric vector estimated measures.","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/compute_ci.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute 95% confidence intervals for derived estimates from a matrix\npopulation model — compute_ci","text":"inputs U matrix, describes survival-related processes, F matrix describes reproduction. underlying assumption U matrix average binomial process F matrix average Poisson process . confidence interval depend largely sample size used.","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/compute_ci.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute 95% confidence intervals for derived estimates from a matrix\npopulation model — compute_ci","text":"Chapter 12 Caswell, H. (2001). Matrix Population Models. Sinauer Associates Incorporated.","code":""},{"path":[]},{"path":"https://jonesor.github.io/mpmsim/reference/compute_ci.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compute 95% confidence intervals for derived estimates from a matrix\npopulation model — compute_ci","text":"Owen Jones jones@biology.sdu.dk","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/compute_ci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute 95% confidence intervals for derived estimates from a matrix\npopulation model — compute_ci","text":"","code":"# Data for use in example matU <- matrix(c(   0.1, 0.0,   0.2, 0.4 ), byrow = TRUE, nrow = 2)  matF <- matrix(c(   0.0, 5.0,   0.0, 0.0 ), byrow = TRUE, nrow = 2)  # Example of use to calculate 95% CI of lambda compute_ci(   mat_U = matU, mat_F = matF, sample_size = 10, FUN =     popbio::lambda ) #>    2.5%   97.5%  #> 0.30000 1.87118   # Example of use to calculate 95% CI of generation time compute_ci(   mat_U = matU, mat_F = matF, sample_size = 40, FUN =     popbio::generation.time ) #>     2.5%    97.5%  #> 2.381531 3.118392   # Example of use to calculate 95% CI of generation time and show the # distribution of those bootstrapped estimates xx <- compute_ci(   mat_U = matU, mat_F = matF, sample_size = 100, FUN =     popbio::generation.time, dist.out = TRUE ) summary(xx$quantiles) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   2.479   2.583   2.687   2.687   2.791   2.895  hist(xx$estimates)"},{"path":"https://jonesor.github.io/mpmsim/reference/generate_mpm_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate lists of Lefkovitch matrix population models (MPMs) based on life\nhistory archetypes — generate_mpm_set","title":"Generate lists of Lefkovitch matrix population models (MPMs) based on life\nhistory archetypes — generate_mpm_set","text":"function generates list n MPMs according specified criteria. Criteria include archetype, acceptable constraining criteria, include lambda, generation time metric derived matrix. function attempts find matrices fulfil criteria, discarding unacceptable matrices. default, takes 1000 attempts find suitable matrix model, error produced. However, number attempts can altered attempts parameter.","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/generate_mpm_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate lists of Lefkovitch matrix population models (MPMs) based on life\nhistory archetypes — generate_mpm_set","text":"","code":"generate_mpm_set(   n = 10,   n_stages = 3,   archetype = 1,   fecundity = 1.5,   split = TRUE,   by_type = TRUE,   max_surv = 0.99,   constraint = NULL,   attempts = 1000 )"},{"path":"https://jonesor.github.io/mpmsim/reference/generate_mpm_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate lists of Lefkovitch matrix population models (MPMs) based on life\nhistory archetypes — generate_mpm_set","text":"n number MPMs generate. Default 10. n_stages number stages MPMs. Default 3. archetype archetype MPMs. Default 1. fecundity vector fecundities MPMs. Default 1.5. split logical indicating whether split submatrices. Default TRUE. by_type logical indicating whether matrices returned list type (, U, F, C). split FALSE, by_type must also FALSE. Defaults TRUE. max_surv maximum acceptable survival value. Defaults 0.99. used split = TRUE. constraint optional data frame 4 columns named fun, arg, lower upper. columns specify (1) function outputs metric derived matrix (2) argument function (NA, argument supplied) (3) lower acceptable bound metric (4) upper acceptable bound metric. used specify attempts integer indicating number attempts made simulating matrix model. default 1000. takes 1000 attempts make matrix satisfies conditions set arguments, warning produced.","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/generate_mpm_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate lists of Lefkovitch matrix population models (MPMs) based on life\nhistory archetypes — generate_mpm_set","text":"list MPMs meet specified criteria.","code":""},{"path":[]},{"path":"https://jonesor.github.io/mpmsim/reference/generate_mpm_set.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate lists of Lefkovitch matrix population models (MPMs) based on life\nhistory archetypes — generate_mpm_set","text":"Owen Jones jones@biology.sdu.dk","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/generate_mpm_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate lists of Lefkovitch matrix population models (MPMs) based on life\nhistory archetypes — generate_mpm_set","text":"","code":"# Basic operation, without splitting matrices and with no constraints generate_mpm_set(   n = 10, n_stages = 5, fecundity = c(0, 0, 4, 8, 10),   archetype = 4, split = FALSE, by_type = FALSE ) #> [[1]] #>            [,1]       [,2]      [,3]      [,4]      [,5] #> [1,] 0.39413786 0.00000000 2.0000000 7.0000000 9.0000000 #> [2,] 0.02148542 0.04712157 0.0000000 0.0000000 0.0000000 #> [3,] 0.00000000 0.54306076 0.4518025 0.0000000 0.0000000 #> [4,] 0.00000000 0.00000000 0.2256430 0.1932323 0.0000000 #> [5,] 0.00000000 0.00000000 0.0000000 0.5766855 0.8508964 #>  #> [[2]] #>           [,1]       [,2]       [,3]      [,4]       [,5] #> [1,] 0.1618696 0.00000000 5.00000000 4.0000000 12.0000000 #> [2,] 0.1031598 0.54410039 0.00000000 0.0000000  0.0000000 #> [3,] 0.0000000 0.06157977 0.57172304 0.0000000  0.0000000 #> [4,] 0.0000000 0.00000000 0.04589874 0.6851412  0.0000000 #> [5,] 0.0000000 0.00000000 0.00000000 0.0396190  0.8218046 #>  #> [[3]] #>           [,1]      [,2]       [,3]      [,4]      [,5] #> [1,] 0.1341243 0.0000000 4.00000000 5.0000000 7.0000000 #> [2,] 0.4054008 0.3537381 0.00000000 0.0000000 0.0000000 #> [3,] 0.0000000 0.2588298 0.69316426 0.0000000 0.0000000 #> [4,] 0.0000000 0.0000000 0.04816166 0.3355461 0.0000000 #> [5,] 0.0000000 0.0000000 0.00000000 0.4707688 0.8274001 #>  #> [[4]] #>           [,1]      [,2]       [,3]      [,4]       [,5] #> [1,] 0.2754621 0.0000000 2.00000000 2.0000000 10.0000000 #> [2,] 0.0785307 0.2449556 0.00000000 0.0000000  0.0000000 #> [3,] 0.0000000 0.1827455 0.34445395 0.0000000  0.0000000 #> [4,] 0.0000000 0.0000000 0.09360598 0.1447526  0.0000000 #> [5,] 0.0000000 0.0000000 0.00000000 0.7384928  0.9346462 #>  #> [[5]] #>            [,1]       [,2]       [,3]      [,4]      [,5] #> [1,] 0.13248722 0.00000000 2.00000000 5.0000000 8.0000000 #> [2,] 0.05103225 0.08949641 0.00000000 0.0000000 0.0000000 #> [3,] 0.00000000 0.48569938 0.68502441 0.0000000 0.0000000 #> [4,] 0.00000000 0.00000000 0.07457235 0.5545678 0.0000000 #> [5,] 0.00000000 0.00000000 0.00000000 0.3451271 0.9384575 #>  #> [[6]] #>            [,1]       [,2]      [,3]      [,4]       [,5] #> [1,] 0.04218191 0.00000000 5.0000000 8.0000000 15.0000000 #> [2,] 0.63543282 0.64336354 0.0000000 0.0000000  0.0000000 #> [3,] 0.00000000 0.07366147 0.4979387 0.0000000  0.0000000 #> [4,] 0.00000000 0.00000000 0.3002749 0.7668051  0.0000000 #> [5,] 0.00000000 0.00000000 0.0000000 0.2273968  0.9957362 #>  #> [[7]] #>           [,1]      [,2]       [,3]      [,4]      [,5] #> [1,] 0.1869641 0.0000000 4.00000000 8.0000000 3.0000000 #> [2,] 0.1741433 0.2641907 0.00000000 0.0000000 0.0000000 #> [3,] 0.0000000 0.1168374 0.54331034 0.0000000 0.0000000 #> [4,] 0.0000000 0.0000000 0.03457146 0.7157580 0.0000000 #> [5,] 0.0000000 0.0000000 0.00000000 0.2440394 0.9859982 #>  #> [[8]] #>           [,1]      [,2]      [,3]      [,4]      [,5] #> [1,] 0.1002505 0.0000000 3.0000000 8.0000000 6.0000000 #> [2,] 0.1715855 0.3845287 0.0000000 0.0000000 0.0000000 #> [3,] 0.0000000 0.1528141 0.3096275 0.0000000 0.0000000 #> [4,] 0.0000000 0.0000000 0.3070806 0.3599722 0.0000000 #> [5,] 0.0000000 0.0000000 0.0000000 0.4478171 0.8152792 #>  #> [[9]] #>           [,1]      [,2]      [,3]      [,4]       [,5] #> [1,] 0.2374239 0.0000000 3.0000000 8.0000000 13.0000000 #> [2,] 0.2554728 0.4339411 0.0000000 0.0000000  0.0000000 #> [3,] 0.0000000 0.1862464 0.5945231 0.0000000  0.0000000 #> [4,] 0.0000000 0.0000000 0.2657374 0.1651876  0.0000000 #> [5,] 0.0000000 0.0000000 0.0000000 0.8223851  0.9954345 #>  #> [[10]] #>             [,1]       [,2]      [,3]       [,4]      [,5] #> [1,] 0.001813775 0.00000000 1.0000000 7.00000000 8.0000000 #> [2,] 0.134033755 0.08035354 0.0000000 0.00000000 0.0000000 #> [3,] 0.000000000 0.71684706 0.2355919 0.00000000 0.0000000 #> [4,] 0.000000000 0.00000000 0.7076876 0.08296916 0.0000000 #> [5,] 0.000000000 0.00000000 0.0000000 0.89770150 0.9834008 #>   # Constrain outputs to A matrices with lambda between 0.9 and 1.1 library(popbio) constrain_df <- data.frame(   fun = \"lambda\", arg = NA, lower = 0.9, upper =     1.1 ) generate_mpm_set(   n = 10, n_stages = 5, fecundity = c(0, 0, 4, 8, 10),   archetype = 4, constraint = constrain_df ) #> $A_list #> $A_list[[1]] #>             [,1]       [,2]      [,3]      [,4]      [,5] #> [1,] 0.002453827 0.00000000 4.0000000 9.0000000 6.0000000 #> [2,] 0.258116840 0.47813365 0.0000000 0.0000000 0.0000000 #> [3,] 0.000000000 0.03635072 0.1066634 0.0000000 0.0000000 #> [4,] 0.000000000 0.00000000 0.5445952 0.3119559 0.0000000 #> [5,] 0.000000000 0.00000000 0.0000000 0.4584238 0.9445414 #>  #> $A_list[[2]] #>            [,1]      [,2]      [,3]        [,4]     [,5] #> [1,] 0.62974475 0.0000000 8.0000000 6.000000000 13.00000 #> [2,] 0.02272177 0.5825253 0.0000000 0.000000000  0.00000 #> [3,] 0.00000000 0.1311891 0.5030093 0.000000000  0.00000 #> [4,] 0.00000000 0.0000000 0.2239840 0.001300892  0.00000 #> [5,] 0.00000000 0.0000000 0.0000000 0.753659984  0.97989 #>  #> $A_list[[3]] #>            [,1]      [,2]      [,3]       [,4]      [,5] #> [1,] 0.12110590 0.0000000 2.0000000 10.0000000 8.0000000 #> [2,] 0.09151743 0.1368095 0.0000000  0.0000000 0.0000000 #> [3,] 0.00000000 0.4140814 0.6604604  0.0000000 0.0000000 #> [4,] 0.00000000 0.0000000 0.0267541  0.1438993 0.0000000 #> [5,] 0.00000000 0.0000000 0.0000000  0.7718515 0.9858615 #>  #> $A_list[[4]] #>            [,1]      [,2]      [,3]       [,4]       [,5] #> [1,] 0.13245563 0.0000000 4.0000000 16.0000000 11.0000000 #> [2,] 0.04397079 0.5540017 0.0000000  0.0000000  0.0000000 #> [3,] 0.00000000 0.1505338 0.4779305  0.0000000  0.0000000 #> [4,] 0.00000000 0.0000000 0.3704536  0.1625879  0.0000000 #> [5,] 0.00000000 0.0000000 0.0000000  0.7816190  0.9557546 #>  #> $A_list[[5]] #>            [,1]       [,2]      [,3]        [,4]       [,5] #> [1,] 0.18588343 0.00000000 5.0000000 13.00000000 12.0000000 #> [2,] 0.08640561 0.36509551 0.0000000  0.00000000  0.0000000 #> [3,] 0.00000000 0.07809237 0.3444179  0.00000000  0.0000000 #> [4,] 0.00000000 0.00000000 0.3760766  0.81205872  0.0000000 #> [5,] 0.00000000 0.00000000 0.0000000  0.03302351  0.8828128 #>  #> $A_list[[6]] #>            [,1]      [,2]      [,3]      [,4]      [,5] #> [1,] 0.05530499 0.0000000 6.0000000 4.0000000 10.000000 #> [2,] 0.05202543 0.2515751 0.0000000 0.0000000  0.000000 #> [3,] 0.00000000 0.0572042 0.1534503 0.0000000  0.000000 #> [4,] 0.00000000 0.0000000 0.5175144 0.1536390  0.000000 #> [5,] 0.00000000 0.0000000 0.0000000 0.7323311  0.947502 #>  #> $A_list[[7]] #>           [,1]      [,2]       [,3]      [,4]      [,5] #> [1,] 0.1658894 0.0000000 2.00000000 9.0000000 9.0000000 #> [2,] 0.1292069 0.2886081 0.00000000 0.0000000 0.0000000 #> [3,] 0.0000000 0.2414145 0.48105967 0.0000000 0.0000000 #> [4,] 0.0000000 0.0000000 0.07044906 0.1031216 0.0000000 #> [5,] 0.0000000 0.0000000 0.00000000 0.7118009 0.9522386 #>  #> $A_list[[8]] #>             [,1]      [,2]      [,3]       [,4]       [,5] #> [1,] 0.001427132 0.0000000 7.0000000 6.00000000 10.0000000 #> [2,] 0.108819528 0.0417949 0.0000000 0.00000000  0.0000000 #> [3,] 0.000000000 0.4773230 0.4620547 0.00000000  0.0000000 #> [4,] 0.000000000 0.0000000 0.2409149 0.66220908  0.0000000 #> [5,] 0.000000000 0.0000000 0.0000000 0.07429877  0.9607456 #>  #> $A_list[[9]] #>           [,1]      [,2]      [,3]        [,4]      [,5] #> [1,] 0.1172924 0.0000000 3.0000000 10.00000000 6.0000000 #> [2,] 0.0583134 0.2486084 0.0000000  0.00000000 0.0000000 #> [3,] 0.0000000 0.1324760 0.1899529  0.00000000 0.0000000 #> [4,] 0.0000000 0.0000000 0.3003975  0.80653096 0.0000000 #> [5,] 0.0000000 0.0000000 0.0000000  0.03761629 0.8835781 #>  #> $A_list[[10]] #>            [,1]       [,2]       [,3]      [,4]      [,5] #> [1,] 0.11381695 0.00000000 2.00000000 7.0000000 9.0000000 #> [2,] 0.07468044 0.38444342 0.00000000 0.0000000 0.0000000 #> [3,] 0.00000000 0.08847666 0.09407706 0.0000000 0.0000000 #> [4,] 0.00000000 0.00000000 0.77888183 0.4471884 0.0000000 #> [5,] 0.00000000 0.00000000 0.00000000 0.5256575 0.9868583 #>  #>  #> $U_list #> $U_list[[1]] #>             [,1]       [,2]      [,3]      [,4]      [,5] #> [1,] 0.002453827 0.00000000 0.0000000 0.0000000 0.0000000 #> [2,] 0.258116840 0.47813365 0.0000000 0.0000000 0.0000000 #> [3,] 0.000000000 0.03635072 0.1066634 0.0000000 0.0000000 #> [4,] 0.000000000 0.00000000 0.5445952 0.3119559 0.0000000 #> [5,] 0.000000000 0.00000000 0.0000000 0.4584238 0.9445414 #>  #> $U_list[[2]] #>            [,1]      [,2]      [,3]        [,4]    [,5] #> [1,] 0.62974475 0.0000000 0.0000000 0.000000000 0.00000 #> [2,] 0.02272177 0.5825253 0.0000000 0.000000000 0.00000 #> [3,] 0.00000000 0.1311891 0.5030093 0.000000000 0.00000 #> [4,] 0.00000000 0.0000000 0.2239840 0.001300892 0.00000 #> [5,] 0.00000000 0.0000000 0.0000000 0.753659984 0.97989 #>  #> $U_list[[3]] #>            [,1]      [,2]      [,3]      [,4]      [,5] #> [1,] 0.12110590 0.0000000 0.0000000 0.0000000 0.0000000 #> [2,] 0.09151743 0.1368095 0.0000000 0.0000000 0.0000000 #> [3,] 0.00000000 0.4140814 0.6604604 0.0000000 0.0000000 #> [4,] 0.00000000 0.0000000 0.0267541 0.1438993 0.0000000 #> [5,] 0.00000000 0.0000000 0.0000000 0.7718515 0.9858615 #>  #> $U_list[[4]] #>            [,1]      [,2]      [,3]      [,4]      [,5] #> [1,] 0.13245563 0.0000000 0.0000000 0.0000000 0.0000000 #> [2,] 0.04397079 0.5540017 0.0000000 0.0000000 0.0000000 #> [3,] 0.00000000 0.1505338 0.4779305 0.0000000 0.0000000 #> [4,] 0.00000000 0.0000000 0.3704536 0.1625879 0.0000000 #> [5,] 0.00000000 0.0000000 0.0000000 0.7816190 0.9557546 #>  #> $U_list[[5]] #>            [,1]       [,2]      [,3]       [,4]      [,5] #> [1,] 0.18588343 0.00000000 0.0000000 0.00000000 0.0000000 #> [2,] 0.08640561 0.36509551 0.0000000 0.00000000 0.0000000 #> [3,] 0.00000000 0.07809237 0.3444179 0.00000000 0.0000000 #> [4,] 0.00000000 0.00000000 0.3760766 0.81205872 0.0000000 #> [5,] 0.00000000 0.00000000 0.0000000 0.03302351 0.8828128 #>  #> $U_list[[6]] #>            [,1]      [,2]      [,3]      [,4]     [,5] #> [1,] 0.05530499 0.0000000 0.0000000 0.0000000 0.000000 #> [2,] 0.05202543 0.2515751 0.0000000 0.0000000 0.000000 #> [3,] 0.00000000 0.0572042 0.1534503 0.0000000 0.000000 #> [4,] 0.00000000 0.0000000 0.5175144 0.1536390 0.000000 #> [5,] 0.00000000 0.0000000 0.0000000 0.7323311 0.947502 #>  #> $U_list[[7]] #>           [,1]      [,2]       [,3]      [,4]      [,5] #> [1,] 0.1658894 0.0000000 0.00000000 0.0000000 0.0000000 #> [2,] 0.1292069 0.2886081 0.00000000 0.0000000 0.0000000 #> [3,] 0.0000000 0.2414145 0.48105967 0.0000000 0.0000000 #> [4,] 0.0000000 0.0000000 0.07044906 0.1031216 0.0000000 #> [5,] 0.0000000 0.0000000 0.00000000 0.7118009 0.9522386 #>  #> $U_list[[8]] #>             [,1]      [,2]      [,3]       [,4]      [,5] #> [1,] 0.001427132 0.0000000 0.0000000 0.00000000 0.0000000 #> [2,] 0.108819528 0.0417949 0.0000000 0.00000000 0.0000000 #> [3,] 0.000000000 0.4773230 0.4620547 0.00000000 0.0000000 #> [4,] 0.000000000 0.0000000 0.2409149 0.66220908 0.0000000 #> [5,] 0.000000000 0.0000000 0.0000000 0.07429877 0.9607456 #>  #> $U_list[[9]] #>           [,1]      [,2]      [,3]       [,4]      [,5] #> [1,] 0.1172924 0.0000000 0.0000000 0.00000000 0.0000000 #> [2,] 0.0583134 0.2486084 0.0000000 0.00000000 0.0000000 #> [3,] 0.0000000 0.1324760 0.1899529 0.00000000 0.0000000 #> [4,] 0.0000000 0.0000000 0.3003975 0.80653096 0.0000000 #> [5,] 0.0000000 0.0000000 0.0000000 0.03761629 0.8835781 #>  #> $U_list[[10]] #>            [,1]       [,2]       [,3]      [,4]      [,5] #> [1,] 0.11381695 0.00000000 0.00000000 0.0000000 0.0000000 #> [2,] 0.07468044 0.38444342 0.00000000 0.0000000 0.0000000 #> [3,] 0.00000000 0.08847666 0.09407706 0.0000000 0.0000000 #> [4,] 0.00000000 0.00000000 0.77888183 0.4471884 0.0000000 #> [5,] 0.00000000 0.00000000 0.00000000 0.5256575 0.9868583 #>  #>  #> $F_list #> $F_list[[1]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    4    9    6 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> $F_list[[2]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    8    6   13 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> $F_list[[3]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    2   10    8 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> $F_list[[4]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    4   16   11 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> $F_list[[5]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    5   13   12 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> $F_list[[6]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    6    4   10 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> $F_list[[7]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    2    9    9 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> $F_list[[8]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    7    6   10 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> $F_list[[9]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    3   10    6 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> $F_list[[10]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    2    7    9 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #>   # As above, but using popdemo::eigs function instead of popbio::lambda # to illustrate use of argument library(popdemo) #> Welcome to popdemo! This is version 1.3-0 #> Use ?popdemo for an intro, or browseVignettes('popdemo') for vignettes #> Citation for popdemo is here: doi.org/10.1111/j.2041-210X.2012.00222.x #> Development and legacy versions are here: github.com/iainmstott/popdemo constrain_df <- data.frame(   fun = \"eigs\", arg = \"lambda\", lower = 0.9, upper =     1.1 ) generate_mpm_set(   n = 10, n_stages = 5, fecundity = c(0, 0, 4, 8, 10),   archetype = 4, constraint = constrain_df ) #> $A_list #> $A_list[[1]] #>            [,1]       [,2]      [,3]       [,4]      [,5] #> [1,] 0.28120621 0.00000000 7.0000000 11.0000000 9.0000000 #> [2,] 0.02069694 0.25047513 0.0000000  0.0000000 0.0000000 #> [3,] 0.00000000 0.08860227 0.1448429  0.0000000 0.0000000 #> [4,] 0.00000000 0.00000000 0.2549618  0.5405770 0.0000000 #> [5,] 0.00000000 0.00000000 0.0000000  0.4126414 0.9674093 #>  #> $A_list[[2]] #>            [,1]       [,2]      [,3]      [,4]      [,5] #> [1,] 0.27366222 0.00000000 5.0000000 8.0000000 8.0000000 #> [2,] 0.04054827 0.08321134 0.0000000 0.0000000 0.0000000 #> [3,] 0.00000000 0.48223453 0.5411496 0.0000000 0.0000000 #> [4,] 0.00000000 0.00000000 0.1765716 0.2087833 0.0000000 #> [5,] 0.00000000 0.00000000 0.0000000 0.6577939 0.9833212 #>  #> $A_list[[3]] #>            [,1]       [,2]      [,3]      [,4]      [,5] #> [1,] 0.01371191 0.00000000 2.0000000 6.0000000 11.000000 #> [2,] 0.07114284 0.15055186 0.0000000 0.0000000  0.000000 #> [3,] 0.00000000 0.05958326 0.0871958 0.0000000  0.000000 #> [4,] 0.00000000 0.00000000 0.4524905 0.4435442  0.000000 #> [5,] 0.00000000 0.00000000 0.0000000 0.3911497  0.866679 #>  #> $A_list[[4]] #>             [,1]      [,2]       [,3]       [,4]      [,5] #> [1,] 0.088127421 0.0000000 6.00000000 14.0000000 7.0000000 #> [2,] 0.006944572 0.1331258 0.00000000  0.0000000 0.0000000 #> [3,] 0.000000000 0.4626101 0.01336594  0.0000000 0.0000000 #> [4,] 0.000000000 0.0000000 0.66942909  0.6167761 0.0000000 #> [5,] 0.000000000 0.0000000 0.00000000  0.2453976 0.9301899 #>  #> $A_list[[5]] #>             [,1]      [,2]      [,3]       [,4]       [,5] #> [1,] 0.068247862 0.0000000 7.0000000 7.00000000 16.0000000 #> [2,] 0.002068006 0.5022461 0.0000000 0.00000000  0.0000000 #> [3,] 0.000000000 0.2579912 0.6801421 0.00000000  0.0000000 #> [4,] 0.000000000 0.0000000 0.1420713 0.06603674  0.0000000 #> [5,] 0.000000000 0.0000000 0.0000000 0.82971759  0.8999529 #>  #> $A_list[[6]] #>             [,1]       [,2]       [,3]      [,4]       [,5] #> [1,] 0.044170993 0.00000000 8.00000000 6.0000000 12.0000000 #> [2,] 0.002607606 0.01646351 0.00000000 0.0000000  0.0000000 #> [3,] 0.000000000 0.35717322 0.04189633 0.0000000  0.0000000 #> [4,] 0.000000000 0.00000000 0.58236869 0.6320868  0.0000000 #> [5,] 0.000000000 0.00000000 0.00000000 0.2431634  0.9446107 #>  #> $A_list[[7]] #>            [,1]       [,2]      [,3]      [,4]      [,5] #> [1,] 0.23940330 0.00000000 1.0000000 6.0000000 9.0000000 #> [2,] 0.01786059 0.47841675 0.0000000 0.0000000 0.0000000 #> [3,] 0.00000000 0.08302076 0.4047267 0.0000000 0.0000000 #> [4,] 0.00000000 0.00000000 0.4305993 0.7566412 0.0000000 #> [5,] 0.00000000 0.00000000 0.0000000 0.1168893 0.9270771 #>  #> $A_list[[8]] #>            [,1]       [,2]      [,3]      [,4]     [,5] #> [1,] 0.01531563 0.00000000 6.0000000 6.0000000 9.000000 #> [2,] 0.09069036 0.08282896 0.0000000 0.0000000 0.000000 #> [3,] 0.00000000 0.47832807 0.2824337 0.0000000 0.000000 #> [4,] 0.00000000 0.00000000 0.4330850 0.4273441 0.000000 #> [5,] 0.00000000 0.00000000 0.0000000 0.3444451 0.897546 #>  #> $A_list[[9]] #>             [,1]       [,2]      [,3]      [,4]       [,5] #> [1,] 0.013997325 0.00000000 5.0000000 6.0000000 11.0000000 #> [2,] 0.009202573 0.06829169 0.0000000 0.0000000  0.0000000 #> [3,] 0.000000000 0.30154345 0.1239476 0.0000000  0.0000000 #> [4,] 0.000000000 0.00000000 0.5508953 0.2281621  0.0000000 #> [5,] 0.000000000 0.00000000 0.0000000 0.6120016  0.8781885 #>  #> $A_list[[10]] #>            [,1]      [,2]       [,3]      [,4]       [,5] #> [1,] 0.31253229 0.0000000 5.00000000 9.0000000 13.0000000 #> [2,] 0.09645687 0.1666158 0.00000000 0.0000000  0.0000000 #> [3,] 0.00000000 0.3368785 0.72675039 0.0000000  0.0000000 #> [4,] 0.00000000 0.0000000 0.04473588 0.4866409  0.0000000 #> [5,] 0.00000000 0.0000000 0.00000000 0.3570152  0.9677079 #>  #>  #> $U_list #> $U_list[[1]] #>            [,1]       [,2]      [,3]      [,4]      [,5] #> [1,] 0.28120621 0.00000000 0.0000000 0.0000000 0.0000000 #> [2,] 0.02069694 0.25047513 0.0000000 0.0000000 0.0000000 #> [3,] 0.00000000 0.08860227 0.1448429 0.0000000 0.0000000 #> [4,] 0.00000000 0.00000000 0.2549618 0.5405770 0.0000000 #> [5,] 0.00000000 0.00000000 0.0000000 0.4126414 0.9674093 #>  #> $U_list[[2]] #>            [,1]       [,2]      [,3]      [,4]      [,5] #> [1,] 0.27366222 0.00000000 0.0000000 0.0000000 0.0000000 #> [2,] 0.04054827 0.08321134 0.0000000 0.0000000 0.0000000 #> [3,] 0.00000000 0.48223453 0.5411496 0.0000000 0.0000000 #> [4,] 0.00000000 0.00000000 0.1765716 0.2087833 0.0000000 #> [5,] 0.00000000 0.00000000 0.0000000 0.6577939 0.9833212 #>  #> $U_list[[3]] #>            [,1]       [,2]      [,3]      [,4]     [,5] #> [1,] 0.01371191 0.00000000 0.0000000 0.0000000 0.000000 #> [2,] 0.07114284 0.15055186 0.0000000 0.0000000 0.000000 #> [3,] 0.00000000 0.05958326 0.0871958 0.0000000 0.000000 #> [4,] 0.00000000 0.00000000 0.4524905 0.4435442 0.000000 #> [5,] 0.00000000 0.00000000 0.0000000 0.3911497 0.866679 #>  #> $U_list[[4]] #>             [,1]      [,2]       [,3]      [,4]      [,5] #> [1,] 0.088127421 0.0000000 0.00000000 0.0000000 0.0000000 #> [2,] 0.006944572 0.1331258 0.00000000 0.0000000 0.0000000 #> [3,] 0.000000000 0.4626101 0.01336594 0.0000000 0.0000000 #> [4,] 0.000000000 0.0000000 0.66942909 0.6167761 0.0000000 #> [5,] 0.000000000 0.0000000 0.00000000 0.2453976 0.9301899 #>  #> $U_list[[5]] #>             [,1]      [,2]      [,3]       [,4]      [,5] #> [1,] 0.068247862 0.0000000 0.0000000 0.00000000 0.0000000 #> [2,] 0.002068006 0.5022461 0.0000000 0.00000000 0.0000000 #> [3,] 0.000000000 0.2579912 0.6801421 0.00000000 0.0000000 #> [4,] 0.000000000 0.0000000 0.1420713 0.06603674 0.0000000 #> [5,] 0.000000000 0.0000000 0.0000000 0.82971759 0.8999529 #>  #> $U_list[[6]] #>             [,1]       [,2]       [,3]      [,4]      [,5] #> [1,] 0.044170993 0.00000000 0.00000000 0.0000000 0.0000000 #> [2,] 0.002607606 0.01646351 0.00000000 0.0000000 0.0000000 #> [3,] 0.000000000 0.35717322 0.04189633 0.0000000 0.0000000 #> [4,] 0.000000000 0.00000000 0.58236869 0.6320868 0.0000000 #> [5,] 0.000000000 0.00000000 0.00000000 0.2431634 0.9446107 #>  #> $U_list[[7]] #>            [,1]       [,2]      [,3]      [,4]      [,5] #> [1,] 0.23940330 0.00000000 0.0000000 0.0000000 0.0000000 #> [2,] 0.01786059 0.47841675 0.0000000 0.0000000 0.0000000 #> [3,] 0.00000000 0.08302076 0.4047267 0.0000000 0.0000000 #> [4,] 0.00000000 0.00000000 0.4305993 0.7566412 0.0000000 #> [5,] 0.00000000 0.00000000 0.0000000 0.1168893 0.9270771 #>  #> $U_list[[8]] #>            [,1]       [,2]      [,3]      [,4]     [,5] #> [1,] 0.01531563 0.00000000 0.0000000 0.0000000 0.000000 #> [2,] 0.09069036 0.08282896 0.0000000 0.0000000 0.000000 #> [3,] 0.00000000 0.47832807 0.2824337 0.0000000 0.000000 #> [4,] 0.00000000 0.00000000 0.4330850 0.4273441 0.000000 #> [5,] 0.00000000 0.00000000 0.0000000 0.3444451 0.897546 #>  #> $U_list[[9]] #>             [,1]       [,2]      [,3]      [,4]      [,5] #> [1,] 0.013997325 0.00000000 0.0000000 0.0000000 0.0000000 #> [2,] 0.009202573 0.06829169 0.0000000 0.0000000 0.0000000 #> [3,] 0.000000000 0.30154345 0.1239476 0.0000000 0.0000000 #> [4,] 0.000000000 0.00000000 0.5508953 0.2281621 0.0000000 #> [5,] 0.000000000 0.00000000 0.0000000 0.6120016 0.8781885 #>  #> $U_list[[10]] #>            [,1]      [,2]       [,3]      [,4]      [,5] #> [1,] 0.31253229 0.0000000 0.00000000 0.0000000 0.0000000 #> [2,] 0.09645687 0.1666158 0.00000000 0.0000000 0.0000000 #> [3,] 0.00000000 0.3368785 0.72675039 0.0000000 0.0000000 #> [4,] 0.00000000 0.0000000 0.04473588 0.4866409 0.0000000 #> [5,] 0.00000000 0.0000000 0.00000000 0.3570152 0.9677079 #>  #>  #> $F_list #> $F_list[[1]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    7   11    9 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> $F_list[[2]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    5    8    8 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> $F_list[[3]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    2    6   11 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> $F_list[[4]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    6   14    7 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> $F_list[[5]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    7    7   16 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> $F_list[[6]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    8    6   12 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> $F_list[[7]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    1    6    9 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> $F_list[[8]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    6    6    9 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> $F_list[[9]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    5    6   11 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> $F_list[[10]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    5    9   13 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #>   # Multiple constraints # Constrain outputs to A matrices with lambda between 0.9 and 1.1, generation # time between 3 and 5 and damping ratio between 1 and 7. library(popbio) constrain_df <- data.frame(   fun = c(\"lambda\", \"generation.time\", \"damping.ratio\"),   arg = c(NA, NA, NA),   lower = c(0.9, 3.0, 1.0),   upper = c(1.1, 5.0, 7.0) ) generate_mpm_set(   n = 10, n_stages = 5, fecundity = c(0, 0, 4, 8, 10),   archetype = 4, constraint = constrain_df ) #> $A_list #> $A_list[[1]] #>           [,1]      [,2]      [,3]      [,4]       [,5] #> [1,] 0.1704326 0.0000000 6.0000000 5.0000000 11.0000000 #> [2,] 0.2526541 0.1788381 0.0000000 0.0000000  0.0000000 #> [3,] 0.0000000 0.5562997 0.5179539 0.0000000  0.0000000 #> [4,] 0.0000000 0.0000000 0.3440421 0.7417104  0.0000000 #> [5,] 0.0000000 0.0000000 0.0000000 0.1349894  0.8814724 #>  #> $A_list[[2]] #>            [,1]      [,2]      [,3]      [,4]       [,5] #> [1,] 0.33632032 0.0000000 2.0000000 7.0000000 13.0000000 #> [2,] 0.08321032 0.4118319 0.0000000 0.0000000  0.0000000 #> [3,] 0.00000000 0.1014435 0.4212170 0.0000000  0.0000000 #> [4,] 0.00000000 0.0000000 0.2151534 0.4888852  0.0000000 #> [5,] 0.00000000 0.0000000 0.0000000 0.3021386  0.9255292 #>  #> $A_list[[3]] #>            [,1]      [,2]      [,3]      [,4]       [,5] #> [1,] 0.08893095 0.0000000 1.0000000 5.0000000 15.0000000 #> [2,] 0.04844071 0.6112252 0.0000000 0.0000000  0.0000000 #> [3,] 0.00000000 0.2650061 0.6597279 0.0000000  0.0000000 #> [4,] 0.00000000 0.0000000 0.2599914 0.5947452  0.0000000 #> [5,] 0.00000000 0.0000000 0.0000000 0.3665834  0.9700162 #>  #> $A_list[[4]] #>            [,1]      [,2]      [,3]       [,4]       [,5] #> [1,] 0.01639093 0.0000000 2.0000000 10.0000000 12.0000000 #> [2,] 0.24721497 0.1235475 0.0000000  0.0000000  0.0000000 #> [3,] 0.00000000 0.2873161 0.5780632  0.0000000  0.0000000 #> [4,] 0.00000000 0.0000000 0.2246370  0.5391206  0.0000000 #> [5,] 0.00000000 0.0000000 0.0000000  0.3755137  0.9168869 #>  #> $A_list[[5]] #>           [,1]      [,2]       [,3]      [,4]      [,5] #> [1,] 0.4416876 0.0000000 7.00000000 6.0000000 7.0000000 #> [2,] 0.3002683 0.1842014 0.00000000 0.0000000 0.0000000 #> [3,] 0.0000000 0.5651136 0.73565235 0.0000000 0.0000000 #> [4,] 0.0000000 0.0000000 0.02296356 0.5749099 0.0000000 #> [5,] 0.0000000 0.0000000 0.00000000 0.3154161 0.9139486 #>  #> $A_list[[6]] #>             [,1]      [,2]       [,3]       [,4]      [,5] #> [1,] 0.004046487 0.0000000 5.00000000 7.00000000 3.0000000 #> [2,] 0.012151932 0.1104949 0.00000000 0.00000000 0.0000000 #> [3,] 0.000000000 0.1119789 0.56300119 0.00000000 0.0000000 #> [4,] 0.000000000 0.0000000 0.01693818 0.07768281 0.0000000 #> [5,] 0.000000000 0.0000000 0.00000000 0.52471635 0.8969879 #>  #> $A_list[[7]] #>            [,1]       [,2]      [,3]       [,4]       [,5] #> [1,] 0.22478538 0.00000000 8.0000000 12.0000000 11.0000000 #> [2,] 0.07713295 0.38828871 0.0000000  0.0000000  0.0000000 #> [3,] 0.00000000 0.07148182 0.3938964  0.0000000  0.0000000 #> [4,] 0.00000000 0.00000000 0.3833508  0.6773859  0.0000000 #> [5,] 0.00000000 0.00000000 0.0000000  0.1980568  0.8944151 #>  #> $A_list[[8]] #>           [,1]      [,2]       [,3]      [,4]      [,5] #> [1,] 0.4824876 0.0000000 2.00000000 5.0000000 8.0000000 #> [2,] 0.1199741 0.6576708 0.00000000 0.0000000 0.0000000 #> [3,] 0.0000000 0.0603594 0.05202994 0.0000000 0.0000000 #> [4,] 0.0000000 0.0000000 0.70847109 0.6257849 0.0000000 #> [5,] 0.0000000 0.0000000 0.00000000 0.1748572 0.8228055 #>  #> $A_list[[9]] #>            [,1]       [,2]      [,3]       [,4]      [,5] #> [1,] 0.06868318 0.00000000 3.0000000 13.0000000 11.000000 #> [2,] 0.14637691 0.08787371 0.0000000  0.0000000  0.000000 #> [3,] 0.00000000 0.57839642 0.3650416  0.0000000  0.000000 #> [4,] 0.00000000 0.00000000 0.3714341  0.7128707  0.000000 #> [5,] 0.00000000 0.00000000 0.0000000  0.1697840  0.900483 #>  #> $A_list[[10]] #>            [,1]        [,2]      [,3]        [,4]      [,5] #> [1,] 0.61710105 0.000000000 3.0000000 5.000000000 7.0000000 #> [2,] 0.05358025 0.677134119 0.0000000 0.000000000 0.0000000 #> [3,] 0.00000000 0.003420948 0.5372546 0.000000000 0.0000000 #> [4,] 0.00000000 0.000000000 0.3555826 0.008842287 0.0000000 #> [5,] 0.00000000 0.000000000 0.0000000 0.951347845 0.9657712 #>  #>  #> $U_list #> $U_list[[1]] #>           [,1]      [,2]      [,3]      [,4]      [,5] #> [1,] 0.1704326 0.0000000 0.0000000 0.0000000 0.0000000 #> [2,] 0.2526541 0.1788381 0.0000000 0.0000000 0.0000000 #> [3,] 0.0000000 0.5562997 0.5179539 0.0000000 0.0000000 #> [4,] 0.0000000 0.0000000 0.3440421 0.7417104 0.0000000 #> [5,] 0.0000000 0.0000000 0.0000000 0.1349894 0.8814724 #>  #> $U_list[[2]] #>            [,1]      [,2]      [,3]      [,4]      [,5] #> [1,] 0.33632032 0.0000000 0.0000000 0.0000000 0.0000000 #> [2,] 0.08321032 0.4118319 0.0000000 0.0000000 0.0000000 #> [3,] 0.00000000 0.1014435 0.4212170 0.0000000 0.0000000 #> [4,] 0.00000000 0.0000000 0.2151534 0.4888852 0.0000000 #> [5,] 0.00000000 0.0000000 0.0000000 0.3021386 0.9255292 #>  #> $U_list[[3]] #>            [,1]      [,2]      [,3]      [,4]      [,5] #> [1,] 0.08893095 0.0000000 0.0000000 0.0000000 0.0000000 #> [2,] 0.04844071 0.6112252 0.0000000 0.0000000 0.0000000 #> [3,] 0.00000000 0.2650061 0.6597279 0.0000000 0.0000000 #> [4,] 0.00000000 0.0000000 0.2599914 0.5947452 0.0000000 #> [5,] 0.00000000 0.0000000 0.0000000 0.3665834 0.9700162 #>  #> $U_list[[4]] #>            [,1]      [,2]      [,3]      [,4]      [,5] #> [1,] 0.01639093 0.0000000 0.0000000 0.0000000 0.0000000 #> [2,] 0.24721497 0.1235475 0.0000000 0.0000000 0.0000000 #> [3,] 0.00000000 0.2873161 0.5780632 0.0000000 0.0000000 #> [4,] 0.00000000 0.0000000 0.2246370 0.5391206 0.0000000 #> [5,] 0.00000000 0.0000000 0.0000000 0.3755137 0.9168869 #>  #> $U_list[[5]] #>           [,1]      [,2]       [,3]      [,4]      [,5] #> [1,] 0.4416876 0.0000000 0.00000000 0.0000000 0.0000000 #> [2,] 0.3002683 0.1842014 0.00000000 0.0000000 0.0000000 #> [3,] 0.0000000 0.5651136 0.73565235 0.0000000 0.0000000 #> [4,] 0.0000000 0.0000000 0.02296356 0.5749099 0.0000000 #> [5,] 0.0000000 0.0000000 0.00000000 0.3154161 0.9139486 #>  #> $U_list[[6]] #>             [,1]      [,2]       [,3]       [,4]      [,5] #> [1,] 0.004046487 0.0000000 0.00000000 0.00000000 0.0000000 #> [2,] 0.012151932 0.1104949 0.00000000 0.00000000 0.0000000 #> [3,] 0.000000000 0.1119789 0.56300119 0.00000000 0.0000000 #> [4,] 0.000000000 0.0000000 0.01693818 0.07768281 0.0000000 #> [5,] 0.000000000 0.0000000 0.00000000 0.52471635 0.8969879 #>  #> $U_list[[7]] #>            [,1]       [,2]      [,3]      [,4]      [,5] #> [1,] 0.22478538 0.00000000 0.0000000 0.0000000 0.0000000 #> [2,] 0.07713295 0.38828871 0.0000000 0.0000000 0.0000000 #> [3,] 0.00000000 0.07148182 0.3938964 0.0000000 0.0000000 #> [4,] 0.00000000 0.00000000 0.3833508 0.6773859 0.0000000 #> [5,] 0.00000000 0.00000000 0.0000000 0.1980568 0.8944151 #>  #> $U_list[[8]] #>           [,1]      [,2]       [,3]      [,4]      [,5] #> [1,] 0.4824876 0.0000000 0.00000000 0.0000000 0.0000000 #> [2,] 0.1199741 0.6576708 0.00000000 0.0000000 0.0000000 #> [3,] 0.0000000 0.0603594 0.05202994 0.0000000 0.0000000 #> [4,] 0.0000000 0.0000000 0.70847109 0.6257849 0.0000000 #> [5,] 0.0000000 0.0000000 0.00000000 0.1748572 0.8228055 #>  #> $U_list[[9]] #>            [,1]       [,2]      [,3]      [,4]     [,5] #> [1,] 0.06868318 0.00000000 0.0000000 0.0000000 0.000000 #> [2,] 0.14637691 0.08787371 0.0000000 0.0000000 0.000000 #> [3,] 0.00000000 0.57839642 0.3650416 0.0000000 0.000000 #> [4,] 0.00000000 0.00000000 0.3714341 0.7128707 0.000000 #> [5,] 0.00000000 0.00000000 0.0000000 0.1697840 0.900483 #>  #> $U_list[[10]] #>            [,1]        [,2]      [,3]        [,4]      [,5] #> [1,] 0.61710105 0.000000000 0.0000000 0.000000000 0.0000000 #> [2,] 0.05358025 0.677134119 0.0000000 0.000000000 0.0000000 #> [3,] 0.00000000 0.003420948 0.5372546 0.000000000 0.0000000 #> [4,] 0.00000000 0.000000000 0.3555826 0.008842287 0.0000000 #> [5,] 0.00000000 0.000000000 0.0000000 0.951347845 0.9657712 #>  #>  #> $F_list #> $F_list[[1]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    6    5   11 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> $F_list[[2]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    2    7   13 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> $F_list[[3]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    1    5   15 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> $F_list[[4]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    2   10   12 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> $F_list[[5]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    7    6    7 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> $F_list[[6]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    5    7    3 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> $F_list[[7]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    8   12   11 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> $F_list[[8]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    2    5    8 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> $F_list[[9]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    3   13   11 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #> $F_list[[10]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    3    5    7 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #>"},{"path":"https://jonesor.github.io/mpmsim/reference/make_leslie_mpm.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Leslie matrix population model — make_leslie_mpm","title":"Create a Leslie matrix population model — make_leslie_mpm","text":"function creates Leslie matrix inputs number stages, fertility (top row matrix), survival probability (value sub-diagonal).","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/make_leslie_mpm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Leslie matrix population model — make_leslie_mpm","text":"","code":"make_leslie_mpm(survival, fertility, n_stages, split = FALSE)"},{"path":"https://jonesor.github.io/mpmsim/reference/make_leslie_mpm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Leslie matrix population model — make_leslie_mpm","text":"survival numeric value representing survival probability stage along lower -diagonal matrix, final value lower-right corner matrix. one value provided, applied survival elements. fertility numeric vector length n_stages representing fertility rate stage. one value provided, applied fertility elements. n_stages numeric value representing number stages matrix split logical argument indicating whether output matrix split separate , U F matrices (= U + F).","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/make_leslie_mpm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Leslie matrix population model — make_leslie_mpm","text":"matrix size n_stages x n_stages representing Leslie matrix","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/make_leslie_mpm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create a Leslie matrix population model — make_leslie_mpm","text":"Caswell, H. (2001). Matrix Population Models: Construction, Analysis, Interpretation. Sinauer. Leslie, P. H. (1945). use matrices certain population mathematics. Biometrika, 33 (3), 183–212. Leslie, P. H. (1948). Notes Use Matrices Population Mathematics. Biometrika, 35(3-4), 213–245.","code":""},{"path":[]},{"path":"https://jonesor.github.io/mpmsim/reference/make_leslie_mpm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a Leslie matrix population model — make_leslie_mpm","text":"Owen Jones jones@biology.sdu.dk","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/make_leslie_mpm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Leslie matrix population model — make_leslie_mpm","text":"","code":"make_leslie_mpm(   survival = 0.5, fertility = c(0.1, 0.2, 0.3),   n_stages = 3, split = FALSE ) #>      [,1] [,2] [,3] #> [1,]  0.1  0.2  0.3 #> [2,]  0.5  0.0  0.0 #> [3,]  0.0  0.5  0.5 make_leslie_mpm(   survival = c(0.5, 0.6, 0.7), fertility = c(0.1, 0.2, 0.3),   n_stages = 3 ) #>      [,1] [,2] [,3] #> [1,]  0.1  0.2  0.3 #> [2,]  0.5  0.0  0.0 #> [3,]  0.0  0.6  0.7 make_leslie_mpm(   survival = seq(0.1, 0.7, length.out = 4), fertility = 0.1,   n_stages = 4 ) #>      [,1] [,2] [,3] [,4] #> [1,]  0.1  0.1  0.1  0.1 #> [2,]  0.1  0.0  0.0  0.0 #> [3,]  0.0  0.3  0.0  0.0 #> [4,]  0.0  0.0  0.5  0.7 make_leslie_mpm(   survival = c(0.8, 0.3, 0.2, 0.1, 0.05), fertility = 0.2,   n_stages = 5 ) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]  0.2  0.2  0.2  0.2 0.20 #> [2,]  0.8  0.0  0.0  0.0 0.00 #> [3,]  0.0  0.3  0.0  0.0 0.00 #> [4,]  0.0  0.0  0.2  0.0 0.00 #> [5,]  0.0  0.0  0.0  0.1 0.05"},{"path":"https://jonesor.github.io/mpmsim/reference/model_fertility.html","id":null,"dir":"Reference","previous_headings":"","what":"Model fertility with age using set functional forms — model_fertility","title":"Model fertility with age using set functional forms — model_fertility","text":"function computes fertility based logistic, step, von Bertalanffy, Hadwiger, normal models. logistic model assumes fertility increases sigmoidally age maturity maximum fertility reached. step model assumes fertility zero age maturity remains constant. von Bertalanffy model assumes , maturity, fertility increases asymptotically age maximum fertility reached. formulation, model set fertility 0 'age maturity - 1', increases point. Hadwiger model rather complex intended model human fertility characteristic hump-shaped fertility. models, output ensures fertility zero age maturity.","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/model_fertility.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model fertility with age using set functional forms — model_fertility","text":"","code":"model_fertility(age = NULL, params, maturity = 0, model = \"logistic\")"},{"path":"https://jonesor.github.io/mpmsim/reference/model_fertility.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model fertility with age using set functional forms — model_fertility","text":"age numeric vector representing age. params numeric vector parameters selected model. number meaning parameters depend selected model. maturity non-negative numeric value indicating age maturity. Whatever model used, fertility forced 0 age maturity. model character string specifying model use. Must one \"logistic\", \"step\", \"vonbertalanffy\",\"normal\" \"hadwiger\".","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/model_fertility.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model fertility with age using set functional forms — model_fertility","text":"numeric vector representing computed fertility values.","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/model_fertility.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Model fertility with age using set functional forms — model_fertility","text":"required parameters varies depending fertility model. parameters provided vector parameters must provided order mentioned . Logistic: \\(f(x) = / (1 + exp(-k  (x - x_m)))\\) Step: \\(f(x)=   \\begin{cases}   , x \\geq m \\\\   , x <  m   \\end{cases}\\) von Bertalanffy: \\(f(x) =  (1 - exp(-k  (x - x_0)))\\) Normal: \\(f(x) = \\times \\exp\\left(   -\\frac{1}{2}\\left(\\frac{x-\\mu}{\\sigma}\\right)^{\\!2}\\,\\right)\\) Hadwiger: \\(f(x) = \\frac{ab}{c} \\left (\\frac{c}{x}  \\right )    ^\\frac{3}{2} \\exp \\left \\{ -b^2  \\left ( \\frac{c}{x}+\\frac{x}{c}-2    \\right ) \\right \\}\\)","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/model_fertility.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Model fertility with age using set functional forms — model_fertility","text":"Bertalanffy, L. von (1938) quantitative theory organic growth (inquiries growth laws. II). Human Biology 10:181–213. Peristera, P. & Kostaki, . (2007) Modeling fertility modern populations. Demographic Research. 16. Article 6, 141-194 doi:10.4054/DemRes.2007.16.6","code":""},{"path":[]},{"path":"https://jonesor.github.io/mpmsim/reference/model_fertility.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Model fertility with age using set functional forms — model_fertility","text":"Owen Jones jones@biology.sdu.dk","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/model_fertility.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model fertility with age using set functional forms — model_fertility","text":"","code":"# Compute fertility using the step model model_fertility(age = 0:20, params = c(A = 10), maturity = 2, model = \"step\") #>  [1]  0  0 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10  # Compute fertility using the logistic model model_fertility(   age = 0:20, params = c(A = 10, k = 0.5, x_m = 8), maturity =     0, model = \"logistic\" ) #>  [1] 0.1798621 0.2931223 0.4742587 0.7585818 1.1920292 1.8242552 2.6894142 #>  [8] 3.7754067 5.0000000 6.2245933 7.3105858 8.1757448 8.8079708 9.2414182 #> [15] 9.5257413 9.7068777 9.8201379 9.8901306 9.9330715 9.9592986 9.9752738  # Compute fertility using the von Bertalanffy model model_fertility(   age = 0:20, params = c(A = 10, k = .3), maturity = 2, model =     \"vonbertalanffy\" ) #>  [1] 0.000000 0.000000 2.591818 4.511884 5.934303 6.988058 7.768698 8.347011 #>  [9] 8.775436 9.092820 9.327945 9.502129 9.631168 9.726763 9.797581 9.850044 #> [17] 9.888910 9.917703 9.939033 9.954834 9.966540  # Compute fertility using the normal model model_fertility(   age = 0:20, params = c(A = 10, mu = 4, sd = 2), maturity = 0,   model = \"normal\" ) #>  [1] 1.353353e+00 3.246525e+00 6.065307e+00 8.824969e+00 1.000000e+01 #>  [6] 8.824969e+00 6.065307e+00 3.246525e+00 1.353353e+00 4.393693e-01 #> [11] 1.110900e-01 2.187491e-02 3.354626e-03 4.006530e-04 3.726653e-05 #> [16] 2.699579e-06 1.522998e-07 6.691586e-09 2.289735e-10 6.101937e-12 #> [21] 1.266417e-13  # Compute fertility using the Hadwiger model model_fertility(   age = 0:50, params = c(a = 0.91, b = 3.85, c = 29.78),   maturity = 0, model = \"hadwiger\" ) #>  [1]           NaN 1.722961e-178  2.632756e-83  7.775444e-52  2.900424e-36 #>  [6]  4.854202e-27  5.511959e-21  9.752061e-17  1.285955e-13  3.012210e-11 #> [11]  2.109246e-09  6.146616e-08  9.291611e-07  8.485057e-06  5.218334e-05 #> [16]  2.340447e-04  8.125653e-04  2.285572e-03  5.396092e-03  1.099593e-02 #> [21]  1.977597e-02  3.196159e-02  4.710896e-02  6.409793e-02  8.132898e-02 #> [26]  9.704998e-02  1.097012e-01  1.181803e-01  1.219739e-01  1.211525e-01 #> [31]  1.162609e-01  1.081542e-01  9.782452e-02  8.625345e-02  7.430620e-02 #> [36]  6.267207e-02  5.184481e-02  4.213231e-02  3.368422e-02  2.652753e-02 #> [41]  2.060288e-02  1.579689e-02  1.196842e-02  8.967956e-03  6.650857e-03 #> [46]  4.885343e-03  3.556515e-03  2.567565e-03  1.839156e-03  1.307766e-03 #> [51]  9.235335e-04"},{"path":"https://jonesor.github.io/mpmsim/reference/model_survival.html","id":null,"dir":"Reference","previous_headings":"","what":"Model survival data using a mortality model — model_survival","title":"Model survival data using a mortality model — model_survival","text":"Model survival data using mortality model","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/model_survival.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model survival data using a mortality model — model_survival","text":"","code":"model_survival(x = NULL, params, model, truncate = 0.01)"},{"path":"https://jonesor.github.io/mpmsim/reference/model_survival.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model survival data using a mortality model — model_survival","text":"x Numeric vector representing age. default NULL, whereby survival trajectory modelled age 0 age survivorship synthetic cohort declines threshold defined truncate argument, default 0.01 (.e. 1% cohort remaining alive). params Numeric vector representing parameters mortality model. model Mortality model: Gompertz, GompertzMakeham, Exponential, Siler. truncate value defining life table output truncated. default 0.01, indicating life table truncated survivorship, lx, > 0.01 (.e. age 1% cohort remains alive).","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/model_survival.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model survival data using a mortality model — model_survival","text":"data frame columns age (x), hazard (hx), survivorship (lx) mortality (qx) survival probability within interval (px).","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/model_survival.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Model survival data using a mortality model — model_survival","text":"required parameters varies depending mortality model. parameters provided vector. Gompertz, parameters b0, b1. GompertzMakeham parameters b0, b1 C. Exponential, parameter C. Siler, parameters a0, a1, C, b0 b1. Note parameters must provided order mentioned . Gompertz: \\(h_x = b_0 \\mathrm{e}^{b_1  x}\\) Gompertz-Makeham: \\(h_x = b_0 \\mathrm{e}^{b_1  x} + c\\) Exponential: \\(h_x = c\\) Siler: \\(h_x = a_0 \\mathrm{e}^{-a_1  x} + c + b_0 \\mathrm{e}^{b_1 x}\\) output, probability survival (px) (death (qx)) represent probability individuals enter age interval \\([x,x+1]\\) survive end interval (die end interval). possible estimate value final row life table (\\(x+1\\) value) therefore input values x may need extended capture final interval.","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/model_survival.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Model survival data using a mortality model — model_survival","text":"Cox, D.R. & Oakes, D. (1984) Analysis Survival Data. Chapman Hall, London, UK. Pinder III, J.E., Wiener, J.G. & Smith, M.H. (1978) Weibull distribution: method summarizing survivorship data. Ecology, 59, 175–179. Pletcher, S. (1999) Model fitting hypothesis testing age-specific mortality data. Journal Evolutionary Biology, 12, 430–439. Siler, W. (1979) competing-risk model animal mortality. Ecology, 60, 750–757. Vaupel, J., Manton, K. & Stallard, E. (1979) impact heterogeneity individual frailty dynamics mortality. Demography, 16, 439–454.","code":""},{"path":[]},{"path":"https://jonesor.github.io/mpmsim/reference/model_survival.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Model survival data using a mortality model — model_survival","text":"Owen Jones jones@biology.sdu.dk","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/model_survival.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model survival data using a mortality model — model_survival","text":"","code":"model_survival(params = c(b_0 = 0.1, b_1 = 0.2), model = \"Gompertz\") #>     x        hx         lx        qx        px #> 1   0 0.1000000 1.00000000 0.1051240 0.8948760 #> 2   1 0.1221403 0.89487598 0.1268617 0.8731383 #> 3   2 0.1491825 0.78135045 0.1526972 0.8473028 #> 4   3 0.1822119 0.66204041 0.1832179 0.8167821 #> 5   4 0.2225541 0.54074272 0.2190086 0.7809914 #> 6   5 0.2718282 0.42231542 0.2606027 0.7393973 #> 7   6 0.3320117 0.31225886 0.3084127 0.6915873 #> 8   7 0.4055200 0.21595427 0.3626343 0.6373657 #> 9   8 0.4953032 0.13764186 0.4231275 0.5768725 #> 10  9 0.6049647 0.07940180 0.4892807 0.5107193 #> 11 10 0.7389056 0.04055203 0.5598781 0.4401219 #> 12 11 0.9025013 0.01784784 0.6330059 0.3669941  model_survival(   params = c(b_0 = 0.1, b_1 = 0.2, C = 0.1), model = \"GompertzMakeham\",   truncate = 0.1 ) #>   x        hx        lx        qx        px #> 1 0 0.2000000 1.0000000 0.1902827 0.8097173 #> 2 1 0.2221403 0.8097173 0.2099518 0.7900482 #> 3 2 0.2491825 0.6397156 0.2333287 0.7666713 #> 4 3 0.2822119 0.4904516 0.2609450 0.7390550 #> 5 4 0.3225541 0.3624707 0.2933298 0.7066702 #> 6 5 0.3718282 0.2561472 0.3309657 0.6690343 #> 7 6 0.4320117 0.1713713 0.3742259 0.6257741 #> 8 7 0.5055200 0.1072397 0.4232876 0.5767124  model_survival(0:10, c(c = 0.2), \"Exponential\") #>     x  hx        lx        qx        px #> 1   0 0.2 1.0000000 0.1812692 0.8187308 #> 2   1 0.2 0.8187308 0.1812692 0.8187308 #> 3   2 0.2 0.6703200 0.1812692 0.8187308 #> 4   3 0.2 0.5488116 0.1812692 0.8187308 #> 5   4 0.2 0.4493290 0.1812692 0.8187308 #> 6   5 0.2 0.3678794 0.1812692 0.8187308 #> 7   6 0.2 0.3011942 0.1812692 0.8187308 #> 8   7 0.2 0.2465970 0.1812692 0.8187308 #> 9   8 0.2 0.2018965 0.1812692 0.8187308 #> 10  9 0.2 0.1652989 0.1812692 0.8187308 #> 11 10 0.2 0.1353353        NA        NA  model_survival(   0:10, c(a_0 = 0.1, a_1 = 0.2, C = 0.1, b_0 = 0.1, b_1 = 0.2),   \"Siler\" ) #>    x        hx         lx        qx        px #> 1  0 0.3000000 1.00000000 0.2606669 0.7393331 #> 2  1 0.3040134 0.73933313 0.2666366 0.7333634 #> 3  2 0.3162145 0.54219987 0.2786665 0.7213335 #> 4  3 0.3370930 0.39110690 0.2969238 0.7030762 #> 5  4 0.3674870 0.27497795 0.3216226 0.6783774 #> 6  5 0.4086161 0.18653882 0.3529771 0.6470229 #> 7  6 0.4621311 0.12069488 0.3911330 0.6088670 #> 8  7 0.5301797 0.07348713 0.4360763 0.5639237 #> 9  8 0.6154929 0.04144114 0.4875201 0.5124799 #> 10 9 0.7214946 0.02123775 0.5447766 0.4552234"},{"path":"https://jonesor.github.io/mpmsim/reference/mpmsim.html","id":null,"dir":"Reference","previous_headings":"","what":"mpmsim — mpmsim","title":"mpmsim — mpmsim","text":"Simulates Matrix Population Models Particular Life History Characteristics","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/mpmsim.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"mpmsim — mpmsim","text":"Owen Jones jones@biology.sdu.dk","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/plot_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a matrix as a heatmap — plot_matrix","title":"Plot a matrix as a heatmap — plot_matrix","text":"Visualise matrix, matrix population model (MPM), heatmap.","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/plot_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a matrix as a heatmap — plot_matrix","text":"","code":"plot_matrix(mat, zero_na = FALSE, legend = FALSE, na_colour = NA, ...)"},{"path":"https://jonesor.github.io/mpmsim/reference/plot_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a matrix as a heatmap — plot_matrix","text":"mat matrix, matrix matrix population model zero_na Logical indicating whether zero values treated NA legend Logical indicating whether include legend na_colour Colour NA values ... Additional arguments passed ggplot","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/plot_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a matrix as a heatmap — plot_matrix","text":"ggplot object","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/plot_matrix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot a matrix as a heatmap — plot_matrix","text":"Owen Jones jones@biology.sdu.dk","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/plot_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a matrix as a heatmap — plot_matrix","text":"","code":"matDim <- 10 A1 <- make_leslie_mpm(   survival = seq(0.1, 0.7, length.out = matDim),   fertility = seq(0.1, 0.7, length.out = matDim),   n_stages = matDim ) plot_matrix(A1, zero_na = TRUE, na_colour = \"black\")  plot_matrix(A1, zero_na = TRUE, na_colour = NA)"},{"path":"https://jonesor.github.io/mpmsim/reference/random_mpm.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random Lefkovitch matrix population models (MPMs) based on life\nhistory archetypes — random_mpm","title":"Generate random Lefkovitch matrix population models (MPMs) based on life\nhistory archetypes — random_mpm","text":"Generates random matrix population model (MPM) element values based defined life history archetypes. Survival transition/growth probabilities particular stage restricted less equal 1 drawing Dirichlet distribution. user can specify archetypes (Takada et al. 2018) restrict MPMs ways: Archetype 1: elements positive, although may small. Therefore, transition /stage possible. model describes life history individuals can progress retrogress rapidly. Archetype 2: form archetype 1 (transition /stage possible), survival probability (column sums survival matrix) increases monotonously individuals advance later stages. model, one first archetype, also allows rapid progression retrogression, realistic stage-specific survival probability increases stage advancement. Archetype 3: positive non-zero elements survival allowed diagonal lower sub-diagonal matrix model represents life cycle species retrogression allowed, progression can happen immediately larger/developed stage (slow progression, e.g., trees). Archetype 4: archetype general form archetype 3, assumption stage-specific survival increases individuals increase size/developmental stage. respect similar archetype 2.","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/random_mpm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate random Lefkovitch matrix population models (MPMs) based on life\nhistory archetypes — random_mpm","text":"","code":"random_mpm(n_stages, fecundity, archetype = 1, split = FALSE)"},{"path":"https://jonesor.github.io/mpmsim/reference/random_mpm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random Lefkovitch matrix population models (MPMs) based on life\nhistory archetypes — random_mpm","text":"n_stages integer defining number stages MPM. fecundity Mean fecundity. value lambda value Poisson distribution value fecundity drawn. integer length 1 vector integers length equal number stages. reproduction particular age class, use value 0. archetype Indication life history archetype used, based Takada et al. 2018. integer 1 4. split TRUE/FALSE, indicating whether matrix produced split survival matrix fertility matrix. Yeah true, output becomes list matrix element. Otherwise, output single matrix.","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/random_mpm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random Lefkovitch matrix population models (MPMs) based on life\nhistory archetypes — random_mpm","text":"Returns random matrix population model characteristics determined archetype selected fecundity vector. split = TRUE, matrix split separate fertility growth/survival matrices, returned list.","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/random_mpm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate random Lefkovitch matrix population models (MPMs) based on life\nhistory archetypes — random_mpm","text":"4 Archetypes, fecundity placed single element top right matrix, single value. vector length n_stages fertility vector spans entire top row matrix. function constrained output ergodic matrices.","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/random_mpm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generate random Lefkovitch matrix population models (MPMs) based on life\nhistory archetypes — random_mpm","text":"Caswell, H. (2001). Matrix Population Models: Construction, Analysis, Interpretation. Sinauer. Lefkovitch, L. P. (1965). study population growth organisms grouped stages. Biometrics, 21(1), 1. Takada, T., Kawai, Y., & Salguero-Gómez, R. (2018). cautionary note elasticity analyses ternary plot using randomly generated population matrices. Population Ecology, 60(1), 37–47.","code":""},{"path":[]},{"path":"https://jonesor.github.io/mpmsim/reference/random_mpm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate random Lefkovitch matrix population models (MPMs) based on life\nhistory archetypes — random_mpm","text":"Owen Jones jones@biology.sdu.dk","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/random_mpm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate random Lefkovitch matrix population models (MPMs) based on life\nhistory archetypes — random_mpm","text":"","code":"random_mpm(n_stages = 2, fecundity = 20, archetype = 1, split = FALSE) #>           [,1]       [,2] #> [1,] 0.5030503 27.3504733 #> [2,] 0.2807178  0.3528764 random_mpm(n_stages = 2, fecundity = 20, archetype = 2, split = TRUE) #> $mat_A #>             [,1]       [,2] #> [1,] 0.001340033 16.3869380 #> [2,] 0.533968196  0.2630669 #>  #> $mat_U #>             [,1]      [,2] #> [1,] 0.001340033 0.3869380 #> [2,] 0.533968196 0.2630669 #>  #> $mat_F #>      [,1] [,2] #> [1,]    0   16 #> [2,]    0    0 #>  random_mpm(n_stages = 3, fecundity = 20, archetype = 3, split = FALSE) #>            [,1]      [,2]       [,3] #> [1,] 0.31486107 0.0000000 24.0000000 #> [2,] 0.07519785 0.3422497  0.0000000 #> [3,] 0.00000000 0.1494929  0.8722942 random_mpm(n_stages = 4, fecundity = 20, archetype = 4, split = TRUE) #> $mat_A #>           [,1]      [,2]      [,3]     [,4] #> [1,] 0.1095803 0.0000000 0.0000000 22.00000 #> [2,] 0.0866338 0.1243483 0.0000000  0.00000 #> [3,] 0.0000000 0.2954512 0.6114105  0.00000 #> [4,] 0.0000000 0.0000000 0.1304932  0.94246 #>  #> $mat_U #>           [,1]      [,2]      [,3]    [,4] #> [1,] 0.1095803 0.0000000 0.0000000 0.00000 #> [2,] 0.0866338 0.1243483 0.0000000 0.00000 #> [3,] 0.0000000 0.2954512 0.6114105 0.00000 #> [4,] 0.0000000 0.0000000 0.1304932 0.94246 #>  #> $mat_F #>      [,1] [,2] [,3] [,4] #> [1,]    0    0    0   22 #> [2,]    0    0    0    0 #> [3,]    0    0    0    0 #> [4,]    0    0    0    0 #>  random_mpm(   n_stages = 5, fecundity = c(0, 0, 4, 8, 10), archetype = 4,   split = TRUE ) #> $mat_A #>           [,1]      [,2]      [,3]        [,4]       [,5] #> [1,] 0.1969882 0.0000000 8.0000000 11.00000000 14.0000000 #> [2,] 0.3516609 0.1880327 0.0000000  0.00000000  0.0000000 #> [3,] 0.0000000 0.4583229 0.6222176  0.00000000  0.0000000 #> [4,] 0.0000000 0.0000000 0.1428311  0.77891755  0.0000000 #> [5,] 0.0000000 0.0000000 0.0000000  0.01888281  0.8118704 #>  #> $mat_U #>           [,1]      [,2]      [,3]       [,4]      [,5] #> [1,] 0.1969882 0.0000000 0.0000000 0.00000000 0.0000000 #> [2,] 0.3516609 0.1880327 0.0000000 0.00000000 0.0000000 #> [3,] 0.0000000 0.4583229 0.6222176 0.00000000 0.0000000 #> [4,] 0.0000000 0.0000000 0.1428311 0.77891755 0.0000000 #> [5,] 0.0000000 0.0000000 0.0000000 0.01888281 0.8118704 #>  #> $mat_F #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    8   11   14 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>"},{"path":[]},{"path":"https://jonesor.github.io/mpmsim/news/index.html","id":"first-release-with-the-following-functionality-development-version","dir":"Changelog","previous_headings":"","what":"First release, with the following functionality.","title":"mpmsim (development version)","text":"Functions simulating Lefkovitch matrix models: generate_mpm_set() andrandom_mpm(). function constructing Leslie matrix models: make_leslie_mpm(), can make use outputs functions describing demographic trajectories (model_fertility() model_survival()). Functions calculating propagating error: add_mpm_error(), calculate_errors() compute_ci(). utility function: plot_matrix()","code":""}]
