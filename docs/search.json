[{"path":"https://jonesor.github.io/mpmsim/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Owen Jones. Author, maintainer.","code":""},{"path":"https://jonesor.github.io/mpmsim/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Jones O (2023). mpmsim: Simulates Matrix Population Models Particular Life History Characteristics. R package version 0.1.0.9000, https://github.com/jonesor/mpmsim.","code":"@Manual{,   title = {mpmsim: Simulates Matrix Population Models with Particular Life History Characteristics},   author = {Owen Jones},   year = {2023},   note = {R package version 0.1.0.9000},   url = {https://github.com/jonesor/mpmsim}, }"},{"path":"https://jonesor.github.io/mpmsim/index.html","id":"mpmsim-","dir":"","previous_headings":"","what":"Simulates Matrix Population Models with Particular Life History\n    Characteristics","title":"Simulates Matrix Population Models with Particular Life History\n    Characteristics","text":"mpmsim contains tools generating random semi-random matrix population models (MPMs) given particular life history archetype. also facilitates generation Leslie matrices, simulation MPMs based expected transition rates sample sizes. can useful exploring uncertainty inferences sample sizes small (unknown).","code":""},{"path":"https://jonesor.github.io/mpmsim/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Simulates Matrix Population Models with Particular Life History\n    Characteristics","text":"can install development version mpmsim like :","code":"# install package 'remotes' if necessary # will already be installed if 'devtools' is installed install.packages(\"remotes\")  # argument 'build_opts = NULL' only needed if you want to build vignettes remotes::install_github(\"jonesor/mpmsim\", build_opts = NULL)"},{"path":"https://jonesor.github.io/mpmsim/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Simulates Matrix Population Models with Particular Life History\n    Characteristics","text":"First, load package.","code":"library(mpmsim)"},{"path":"https://jonesor.github.io/mpmsim/index.html","id":"generate-a-leslie-matrix","dir":"","previous_headings":"Usage","what":"Generate a Leslie matrix","title":"Simulates Matrix Population Models with Particular Life History\n    Characteristics","text":"make_leslie_matrix function can used generate Leslie matrix, stages represent discrete age classes. Leslie matrix, survival represented lower sub-diagonal lower-right-hand corner element, fertility shown top row. survival fertility length equal number stages model. Users can specify survival fertility either single value vector values, length equal dimensions matrix model. arguments single values, value repeated along survival/fertility sequence. Users can generate large numbers plausible Leslie matrices repeating make_leslie_matrix command loop. example, following code produces list 10 Leslie matrices increasing survival age.","code":"make_leslie_matrix(   survival = seq(0.1, 0.45, length.out = 4),   fertility = c(0, 0, 2.4, 5), n_stages = 4, split = FALSE ) #>      [,1]      [,2]      [,3] [,4] #> [1,]  0.0 0.0000000 2.4000000 5.00 #> [2,]  0.1 0.0000000 0.0000000 0.00 #> [3,]  0.0 0.2166667 0.0000000 0.00 #> [4,]  0.0 0.0000000 0.3333333 0.45 juvSurv <- runif(n = 10, min = 0.0, max = 0.1) adultSurv <- runif(n = 10, min = 0.4, max = 0.8) adultFert <- rpois(10, 6)  outputMPMs <- NULL for (i in 1:10) {   outputMPMs[[i]] <- make_leslie_matrix(     survival = seq(juvSurv[i], adultSurv[i], length.out = 6),     fertility = c(0, 0, rep(adultFert[i], 4)), n_stages = 6, split = FALSE   ) }  outputMPMs #> [[1]] #>            [,1]      [,2]      [,3]      [,4]      [,5]      [,6] #> [1,] 0.00000000 0.0000000 7.0000000 7.0000000 7.0000000 7.0000000 #> [2,] 0.04118865 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [3,] 0.00000000 0.1673406 0.0000000 0.0000000 0.0000000 0.0000000 #> [4,] 0.00000000 0.0000000 0.2934926 0.0000000 0.0000000 0.0000000 #> [5,] 0.00000000 0.0000000 0.0000000 0.4196445 0.0000000 0.0000000 #> [6,] 0.00000000 0.0000000 0.0000000 0.0000000 0.5457965 0.6719484 #>  #> [[2]] #>            [,1]      [,2]      [,3]      [,4]      [,5]      [,6] #> [1,] 0.00000000 0.0000000 5.0000000 5.0000000 5.0000000 5.0000000 #> [2,] 0.01210159 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [3,] 0.00000000 0.1078452 0.0000000 0.0000000 0.0000000 0.0000000 #> [4,] 0.00000000 0.0000000 0.2035889 0.0000000 0.0000000 0.0000000 #> [5,] 0.00000000 0.0000000 0.0000000 0.2993325 0.0000000 0.0000000 #> [6,] 0.00000000 0.0000000 0.0000000 0.0000000 0.3950761 0.4908198 #>  #> [[3]] #>            [,1]      [,2]      [,3]       [,4]       [,5]       [,6] #> [1,] 0.00000000 0.0000000 12.000000 12.0000000 12.0000000 12.0000000 #> [2,] 0.02930994 0.0000000  0.000000  0.0000000  0.0000000  0.0000000 #> [3,] 0.00000000 0.1542125  0.000000  0.0000000  0.0000000  0.0000000 #> [4,] 0.00000000 0.0000000  0.279115  0.0000000  0.0000000  0.0000000 #> [5,] 0.00000000 0.0000000  0.000000  0.4040176  0.0000000  0.0000000 #> [6,] 0.00000000 0.0000000  0.000000  0.0000000  0.5289202  0.6538227 #>  #> [[4]] #>            [,1]      [,2]      [,3]     [,4]      [,5]      [,6] #> [1,] 0.00000000 0.0000000 7.0000000 7.000000 7.0000000 7.0000000 #> [2,] 0.08456303 0.0000000 0.0000000 0.000000 0.0000000 0.0000000 #> [3,] 0.00000000 0.2207337 0.0000000 0.000000 0.0000000 0.0000000 #> [4,] 0.00000000 0.0000000 0.3569044 0.000000 0.0000000 0.0000000 #> [5,] 0.00000000 0.0000000 0.0000000 0.493075 0.0000000 0.0000000 #> [6,] 0.00000000 0.0000000 0.0000000 0.000000 0.6292457 0.7654164 #>  #> [[5]] #>            [,1]      [,2]      [,3]    [,4]      [,5]      [,6] #> [1,] 0.00000000 0.0000000 6.0000000 6.00000 6.0000000 6.0000000 #> [2,] 0.05699084 0.0000000 0.0000000 0.00000 0.0000000 0.0000000 #> [3,] 0.00000000 0.1330206 0.0000000 0.00000 0.0000000 0.0000000 #> [4,] 0.00000000 0.0000000 0.2090503 0.00000 0.0000000 0.0000000 #> [5,] 0.00000000 0.0000000 0.0000000 0.28508 0.0000000 0.0000000 #> [6,] 0.00000000 0.0000000 0.0000000 0.00000 0.3611097 0.4371395 #>  #> [[6]] #>            [,1]      [,2]      [,3]      [,4]      [,5]      [,6] #> [1,] 0.00000000 0.0000000 2.0000000 2.0000000 2.0000000 2.0000000 #> [2,] 0.01442993 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [3,] 0.00000000 0.1557757 0.0000000 0.0000000 0.0000000 0.0000000 #> [4,] 0.00000000 0.0000000 0.2971214 0.0000000 0.0000000 0.0000000 #> [5,] 0.00000000 0.0000000 0.0000000 0.4384672 0.0000000 0.0000000 #> [6,] 0.00000000 0.0000000 0.0000000 0.0000000 0.5798129 0.7211587 #>  #> [[7]] #>            [,1]     [,2]      [,3]      [,4]      [,5]      [,6] #> [1,] 0.00000000 0.000000 6.0000000 6.0000000 6.0000000 6.0000000 #> [2,] 0.05752491 0.000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [3,] 0.00000000 0.140396 0.0000000 0.0000000 0.0000000 0.0000000 #> [4,] 0.00000000 0.000000 0.2232671 0.0000000 0.0000000 0.0000000 #> [5,] 0.00000000 0.000000 0.0000000 0.3061382 0.0000000 0.0000000 #> [6,] 0.00000000 0.000000 0.0000000 0.0000000 0.3890093 0.4718804 #>  #> [[8]] #>            [,1]      [,2]     [,3]      [,4]      [,5]      [,6] #> [1,] 0.00000000 0.0000000 7.000000 7.0000000 7.0000000 7.0000000 #> [2,] 0.08203721 0.0000000 0.000000 0.0000000 0.0000000 0.0000000 #> [3,] 0.00000000 0.1465071 0.000000 0.0000000 0.0000000 0.0000000 #> [4,] 0.00000000 0.0000000 0.210977 0.0000000 0.0000000 0.0000000 #> [5,] 0.00000000 0.0000000 0.000000 0.2754469 0.0000000 0.0000000 #> [6,] 0.00000000 0.0000000 0.000000 0.0000000 0.3399168 0.4043867 #>  #> [[9]] #>            [,1]      [,2]    [,3]      [,4]      [,5]      [,6] #> [1,] 0.00000000 0.0000000 5.00000 5.0000000 5.0000000 5.0000000 #> [2,] 0.04716641 0.0000000 0.00000 0.0000000 0.0000000 0.0000000 #> [3,] 0.00000000 0.1214032 0.00000 0.0000000 0.0000000 0.0000000 #> [4,] 0.00000000 0.0000000 0.19564 0.0000000 0.0000000 0.0000000 #> [5,] 0.00000000 0.0000000 0.00000 0.2698768 0.0000000 0.0000000 #> [6,] 0.00000000 0.0000000 0.00000 0.0000000 0.3441136 0.4183503 #>  #> [[10]] #>           [,1]      [,2]      [,3]      [,4]      [,5]      [,6] #> [1,] 0.0000000 0.0000000 3.0000000 3.0000000 3.0000000 3.0000000 #> [2,] 0.0917043 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 #> [3,] 0.0000000 0.1815941 0.0000000 0.0000000 0.0000000 0.0000000 #> [4,] 0.0000000 0.0000000 0.2714839 0.0000000 0.0000000 0.0000000 #> [5,] 0.0000000 0.0000000 0.0000000 0.3613736 0.0000000 0.0000000 #> [6,] 0.0000000 0.0000000 0.0000000 0.0000000 0.4512634 0.5411532"},{"path":"https://jonesor.github.io/mpmsim/index.html","id":"simulate-an-mpm-using-a-particular-sample-size","dir":"","previous_headings":"Usage","what":"Simulate an MPM using a particular sample size","title":"Simulates Matrix Population Models with Particular Life History\n    Characteristics","text":"function simulate_mpm can used simulate MPM based expected transition rates (survival fecundity) sample sizes. expected transition rates must provided matrices. sample size(s) can given either matrix sample sizes element matrix single value applied elements matrix. function uses binomial process simulate survival/growth elements Poisson process simulate fecundity elements. result, sample sizes large, simulated MPM closely reflect expected transition rates. contrast, sample sizes small, simulated matrices become variable. illustrate use function, following code first generates 3-stage Leslie matrix using make_leslie_matrix function. passes U F matrices Leslie matrix simulate_mpm function. , two matrices simulated, first sample size 1000, sample size seven. list arbitrary number matrices can generated easily using replicate, follows.","code":"mats <- make_leslie_matrix(   survival = c(0.3, 0.5, 0.8),   fertility = c(0, 2.2, 4.4),   n_stages = 3, split = TRUE )  simulate_mpm(   matU = mats$matU, matF = mats$matF,   sample_size = 1000, split = FALSE ) #>       [,1]  [,2]  [,3] #> [1,] 0.000 2.180 4.458 #> [2,] 0.299 0.000 0.000 #> [3,] 0.000 0.536 0.793  simulate_mpm(   matU = mats$matU, matF = mats$matF,   sample_size = 7, split = FALSE ) #>           [,1]      [,2]      [,3] #> [1,] 0.0000000 2.4285714 4.2857143 #> [2,] 0.5714286 0.0000000 0.0000000 #> [3,] 0.0000000 0.4285714 0.8571429 replicate(   n = 5,   simulate_mpm(     matU = mats$matU, matF = mats$matF,     sample_size = 7, split = FALSE   ) ) #> , , 1 #>  #>           [,1]      [,2]      [,3] #> [1,] 0.0000000 1.1428571 4.7142857 #> [2,] 0.2857143 0.0000000 0.0000000 #> [3,] 0.0000000 0.5714286 0.8571429 #>  #> , , 2 #>  #>           [,1]      [,2]      [,3] #> [1,] 0.0000000 2.4285714 4.8571429 #> [2,] 0.1428571 0.0000000 0.0000000 #> [3,] 0.0000000 0.7142857 0.8571429 #>  #> , , 3 #>  #>           [,1]      [,2]      [,3] #> [1,] 0.0000000 2.2857143 4.2857143 #> [2,] 0.1428571 0.0000000 0.0000000 #> [3,] 0.0000000 0.2857143 0.7142857 #>  #> , , 4 #>  #>           [,1]      [,2]     [,3] #> [1,] 0.0000000 2.8571429 4.142857 #> [2,] 0.2857143 0.0000000 0.000000 #> [3,] 0.0000000 0.4285714 1.000000 #>  #> , , 5 #>  #>           [,1]      [,2]     [,3] #> [1,] 0.0000000 1.7142857 3.714286 #> [2,] 0.1428571 0.0000000 0.000000 #> [3,] 0.0000000 0.5714286 1.000000"},{"path":"https://jonesor.github.io/mpmsim/index.html","id":"generate-single-random-mpms","dir":"","previous_headings":"Usage","what":"Generate single random MPMs","title":"Simulates Matrix Population Models with Particular Life History\n    Characteristics","text":"random_mpm function can used generate random matrix population model (MPM) element values based defined life history archetypes. function draws survival transition/growth probabilities Dirichlet distribution ensure column totals, including death, less equal 1. Fecundity can specified single value vector length equal dimensions matrix. specified single value, placed top-right corner matrix. specified vector length n_stages, spans entire top row matrix. archetype argument can used constrain MPMs, example, archetype = 2 constraints survival probability increase monotonically individuals advance later stages. information, see documentation random_mpm Takada et al. (2018).","code":"random_mpm(n_stages = 3, fecundity = 20, archetype = 2) #>           [,1]      [,2]        [,3] #> [1,] 0.1101680 0.3208383 17.25137614 #> [2,] 0.3473225 0.2401982  0.09530453 #> [3,] 0.1388808 0.1067494  0.61513722"},{"path":"https://jonesor.github.io/mpmsim/index.html","id":"generate-a-set-of-random-mpms","dir":"","previous_headings":"Usage","what":"Generate a set of random MPMs","title":"Simulates Matrix Population Models with Particular Life History\n    Characteristics","text":"generate_mpm_set function can used quickly generate large numbers MPMs using approach. example, following code generates five MPMs archetype 1. using lower_lambda upper_lambda arguments, users can specify acceptable population growth rate range set matrices. can useful life history analyses might assume life histories lambda values close 1 can persist nature.","code":"generate_mpm_set(   n = 5, n_stages = 4, fecundity = 8, archetype = 1,   lower_lambda = 0.9, upper_lambda = 1.1 ) #> [[1]] #>            [,1]        [,2]       [,3]       [,4] #> [1,] 0.08396256 0.037471944 0.01241634 4.10140303 #> [2,] 0.08832627 0.135231937 0.32492699 0.09943638 #> [3,] 0.17614282 0.451050390 0.34655483 0.27178162 #> [4,] 0.13430059 0.008556661 0.06383719 0.21419332 #>  #> [[2]] #>             [,1]       [,2]       [,3]       [,4] #> [1,] 0.510553771 0.30487794 0.25680321 2.55432932 #> [2,] 0.000873154 0.05833942 0.01095387 0.30554443 #> [3,] 0.196608915 0.32738547 0.09796783 0.03961696 #> [4,] 0.040965157 0.20692105 0.41945808 0.03440813 #>  #> [[3]] #>            [,1]       [,2]       [,3]      [,4] #> [1,] 0.12534995 0.08856549 0.50265568 5.0151634 #> [2,] 0.09029332 0.53381851 0.22311129 0.2872258 #> [3,] 0.13523087 0.20348139 0.01969804 0.0402803 #> [4,] 0.03416139 0.06421989 0.24363340 0.2493481 #>  #> [[4]] #>            [,1]        [,2]       [,3]       [,4] #> [1,] 0.04811155 0.488040514 0.14341295 7.43334320 #> [2,] 0.12257546 0.114182140 0.58026218 0.16681269 #> [3,] 0.73918175 0.206185854 0.08091527 0.30683555 #> [4,] 0.01369368 0.005066602 0.04265726 0.07717937 #>  #> [[5]] #>           [,1]       [,2]      [,3]      [,4] #> [1,] 0.2043390 0.35249341 0.2282437 3.5005028 #> [2,] 0.2767119 0.44971373 0.1959247 0.1076575 #> [3,] 0.1223184 0.11184164 0.1870900 0.1211524 #> [4,] 0.1064033 0.05074229 0.1186717 0.1857593"},{"path":"https://jonesor.github.io/mpmsim/index.html","id":"contributions","dir":"","previous_headings":"","what":"Contributions","title":"Simulates Matrix Population Models with Particular Life History\n    Characteristics","text":"contributions welcome. Please note project released Contributor Code Conduct. participating project agree abide terms. numerous ways contributing. can submit bug reports, suggestions etc. opening issue. can copy fork repository, make code edits send us pull request. ’s . also welcome email .","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/generate_mpm_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate lists of matrix population models (MPMs) based on life history archetypes — generate_mpm_set","title":"Generate lists of matrix population models (MPMs) based on life history archetypes — generate_mpm_set","text":"function generates list n MPMs according specified criteria. Criteria include archetype, acceptable lambda values. function attempts find matrices fulfill lambda criteria, discarding unacceptable matrices. takes 1000 attempts find suitable matrix model, error produced.","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/generate_mpm_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate lists of matrix population models (MPMs) based on life history archetypes — generate_mpm_set","text":"","code":"generate_mpm_set(   n = 10,   lower_lambda = 0.9,   upper_lambda = 1.1,   n_stages = 3,   archetype = 1,   fecundity = 1.5,   split = FALSE )"},{"path":"https://jonesor.github.io/mpmsim/reference/generate_mpm_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate lists of matrix population models (MPMs) based on life history archetypes — generate_mpm_set","text":"n number MPMs generate. Default 10. lower_lambda lower bound acceptable lambda values. Default 0.9. upper_lambda upper bound acceptable lambda values. Default 1.1. n_stages number stages MPMs. Default 3. archetype archetype MPMs. Default 1. fecundity vector fecundities MPMs. Default 1.5. split logical indicating whether split matrices. Default FALSE.","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/generate_mpm_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate lists of matrix population models (MPMs) based on life history archetypes — generate_mpm_set","text":"list MPMs meet specified criteria.","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/generate_mpm_set.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate lists of matrix population models (MPMs) based on life history archetypes — generate_mpm_set","text":"Owen Jones jones@biology.sdu.dk","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/generate_mpm_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate lists of matrix population models (MPMs) based on life history archetypes — generate_mpm_set","text":"","code":"generate_mpm_set(   n = 10, lower_lambda = 0.9, upper_lambda = 1.1,   n_stages = 5, fecundity = c(0, 0, 4, 8, 10), archetype = 4, split = TRUE ) #> [[1]] #> [[1]]$matU #>           [,1]       [,2]      [,3]       [,4]      [,5] #> [1,] 0.1038195 0.00000000 0.0000000 0.00000000 0.0000000 #> [2,] 0.2186456 0.40918875 0.0000000 0.00000000 0.0000000 #> [3,] 0.0000000 0.06548809 0.1951394 0.00000000 0.0000000 #> [4,] 0.0000000 0.00000000 0.3118175 0.60016297 0.0000000 #> [5,] 0.0000000 0.00000000 0.0000000 0.09113694 0.8657402 #>  #> [[1]]$matF #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    0   10    6 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #>  #> [[2]] #> [[2]]$matU #>             [,1]       [,2]      [,3]      [,4]      [,5] #> [1,] 0.105996710 0.00000000 0.0000000 0.0000000 0.0000000 #> [2,] 0.003936137 0.02583908 0.0000000 0.0000000 0.0000000 #> [3,] 0.000000000 0.81020024 0.4283551 0.0000000 0.0000000 #> [4,] 0.000000000 0.00000000 0.4149454 0.5764010 0.0000000 #> [5,] 0.000000000 0.00000000 0.0000000 0.2970238 0.8951612 #>  #> [[2]]$matF #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    4    9    7 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #>  #> [[3]] #> [[3]]$matU #>            [,1]       [,2]      [,3]      [,4]      [,5] #> [1,] 0.13526391 0.00000000 0.0000000 0.0000000 0.0000000 #> [2,] 0.01350234 0.04535076 0.0000000 0.0000000 0.0000000 #> [3,] 0.00000000 0.56108696 0.1822702 0.0000000 0.0000000 #> [4,] 0.00000000 0.00000000 0.5530560 0.4477490 0.0000000 #> [5,] 0.00000000 0.00000000 0.0000000 0.3023365 0.9406651 #>  #> [[3]]$matF #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    4    9   13 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #>  #> [[4]] #> [[4]]$matU #>            [,1]       [,2]      [,3]      [,4]      [,5] #> [1,] 0.04110936 0.00000000 0.0000000 0.0000000 0.0000000 #> [2,] 0.07328480 0.52914608 0.0000000 0.0000000 0.0000000 #> [3,] 0.00000000 0.09673606 0.7308048 0.0000000 0.0000000 #> [4,] 0.00000000 0.00000000 0.1174341 0.2504293 0.0000000 #> [5,] 0.00000000 0.00000000 0.0000000 0.6386810 0.9719477 #>  #> [[4]]$matF #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    2    8   10 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #>  #> [[5]] #> [[5]]$matU #>            [,1]       [,2]      [,3]      [,4]      [,5] #> [1,] 0.08650612 0.00000000 0.0000000 0.0000000 0.0000000 #> [2,] 0.04518150 0.08135352 0.0000000 0.0000000 0.0000000 #> [3,] 0.00000000 0.13623696 0.6902566 0.0000000 0.0000000 #> [4,] 0.00000000 0.00000000 0.2090077 0.6931907 0.0000000 #> [5,] 0.00000000 0.00000000 0.0000000 0.2371625 0.9332751 #>  #> [[5]]$matF #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    7    7   10 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #>  #> [[6]] #> [[6]]$matU #>           [,1]      [,2]       [,3]      [,4]      [,5] #> [1,] 0.3485459 0.0000000 0.00000000 0.0000000 0.0000000 #> [2,] 0.1341659 0.2406780 0.00000000 0.0000000 0.0000000 #> [3,] 0.0000000 0.2585793 0.48974187 0.0000000 0.0000000 #> [4,] 0.0000000 0.0000000 0.05851482 0.6238108 0.0000000 #> [5,] 0.0000000 0.0000000 0.00000000 0.2726266 0.9462773 #>  #> [[6]]$matF #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    4    8    5 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #>  #> [[7]] #> [[7]]$matU #>            [,1]      [,2]      [,3]       [,4]      [,5] #> [1,] 0.20509733 0.0000000 0.0000000 0.00000000 0.0000000 #> [2,] 0.09061697 0.2620186 0.0000000 0.00000000 0.0000000 #> [3,] 0.00000000 0.1061072 0.4266890 0.00000000 0.0000000 #> [4,] 0.00000000 0.0000000 0.3862679 0.88971242 0.0000000 #> [5,] 0.00000000 0.0000000 0.0000000 0.01599092 0.9415275 #>  #> [[7]]$matF #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    4    9    8 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #>  #> [[8]] #> [[8]]$matU #>             [,1]      [,2]       [,3]      [,4]     [,5] #> [1,] 0.002893263 0.0000000 0.00000000 0.0000000 0.000000 #> [2,] 0.197247905 0.2968450 0.00000000 0.0000000 0.000000 #> [3,] 0.000000000 0.1665788 0.04241757 0.0000000 0.000000 #> [4,] 0.000000000 0.0000000 0.55506942 0.9055599 0.000000 #> [5,] 0.000000000 0.0000000 0.00000000 0.0271631 0.938363 #>  #> [[8]]$matF #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    4    7    5 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #>  #> [[9]] #> [[9]]$matU #>            [,1]      [,2]      [,3]       [,4]      [,5] #> [1,] 0.57599550 0.0000000 0.0000000 0.00000000 0.0000000 #> [2,] 0.01055545 0.4128064 0.0000000 0.00000000 0.0000000 #> [3,] 0.00000000 0.2881779 0.1931243 0.00000000 0.0000000 #> [4,] 0.00000000 0.0000000 0.5500167 0.03695607 0.0000000 #> [5,] 0.00000000 0.0000000 0.0000000 0.83930901 0.9703473 #>  #> [[9]]$matF #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    6    6   11 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #>  #> [[10]] #> [[10]]$matU #>           [,1]       [,2]      [,3]      [,4]      [,5] #> [1,] 0.2054017 0.00000000 0.0000000 0.0000000 0.0000000 #> [2,] 0.2326979 0.44399878 0.0000000 0.0000000 0.0000000 #> [3,] 0.0000000 0.03094214 0.4765678 0.0000000 0.0000000 #> [4,] 0.0000000 0.00000000 0.4499889 0.2431629 0.0000000 #> [5,] 0.0000000 0.00000000 0.0000000 0.7036929 0.9574048 #>  #> [[10]]$matF #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    1    3   12 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>  #>"},{"path":"https://jonesor.github.io/mpmsim/reference/make_leslie_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Leslie matrix — make_leslie_matrix","title":"Create a Leslie matrix — make_leslie_matrix","text":"function creates Leslie matrix inputs number stages, fertility (top row matrix), survival probability (value sub-diagonal).","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/make_leslie_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Leslie matrix — make_leslie_matrix","text":"","code":"make_leslie_matrix(survival, fertility, n_stages, split = FALSE)"},{"path":"https://jonesor.github.io/mpmsim/reference/make_leslie_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Leslie matrix — make_leslie_matrix","text":"survival numeric value representing survival probability stage along lower -diagonal matrix, final value lower-right corner matrix. one value provided, applied survival elements. fertility numeric vector length n_stages representing fertility rate stage. one value provided, applied fertility elements. n_stages numeric value representing number stages matrix split logical argument indicating whether output matrix split separate U F matrices.","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/make_leslie_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Leslie matrix — make_leslie_matrix","text":"matrix size n_stages x n_stages representing Leslie matrix","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/make_leslie_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Leslie matrix — make_leslie_matrix","text":"","code":"make_leslie_matrix(   survival = 0.5, fertility = c(0.1, 0.2, 0.3),   n_stages = 3, split = FALSE ) #>      [,1] [,2] [,3] #> [1,]  0.1  0.2  0.3 #> [2,]  0.5  0.0  0.0 #> [3,]  0.0  0.5  0.5 make_leslie_matrix(   survival = c(0.5, 0.6, 0.7), fertility = c(0.1, 0.2, 0.3),   n_stages = 3 ) #>      [,1] [,2] [,3] #> [1,]  0.1  0.2  0.3 #> [2,]  0.5  0.0  0.0 #> [3,]  0.0  0.6  0.7 make_leslie_matrix(   survival = seq(0.1, 0.7, length.out = 4), fertility = 0.1,   n_stages = 4 ) #>      [,1] [,2] [,3] [,4] #> [1,]  0.1  0.1  0.1  0.1 #> [2,]  0.1  0.0  0.0  0.0 #> [3,]  0.0  0.3  0.0  0.0 #> [4,]  0.0  0.0  0.5  0.7 make_leslie_matrix(   survival = c(0.8, 0.3, 0.2, 0.1, 0.05), fertility = 0.2,   n_stages = 5 ) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]  0.2  0.2  0.2  0.2 0.20 #> [2,]  0.8  0.0  0.0  0.0 0.00 #> [3,]  0.0  0.3  0.0  0.0 0.00 #> [4,]  0.0  0.0  0.2  0.0 0.00 #> [5,]  0.0  0.0  0.0  0.1 0.05"},{"path":"https://jonesor.github.io/mpmsim/reference/plot_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a matrix as a heatmap — plot_matrix","title":"Plot a matrix as a heatmap — plot_matrix","text":"Visualise matrix, matrix population model (MPM), heatmap.","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/plot_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a matrix as a heatmap — plot_matrix","text":"","code":"plot_matrix(A, zeroNA = FALSE, legend = FALSE, na_colour = NA, ...)"},{"path":"https://jonesor.github.io/mpmsim/reference/plot_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a matrix as a heatmap — plot_matrix","text":"matrix, matrix matrix population model zeroNA Logical indicating whether zero values treated NA legend Logical indicating whether include legend na_colour Colour NA values ... Additional arguments passed ggplot","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/plot_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a matrix as a heatmap — plot_matrix","text":"ggplot object","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/plot_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a matrix as a heatmap — plot_matrix","text":"","code":"matDim <- 10 A1 <- make_leslie_matrix(   survival = seq(0.1, 0.7, length.out = matDim),   fertility = seq(0.1, 0.7, length.out = matDim),   n_stages = matDim ) plot_matrix(A1, zeroNA = TRUE, na_colour = \"black\")  plot_matrix(A1, zeroNA = TRUE, na_colour = NA)"},{"path":"https://jonesor.github.io/mpmsim/reference/random_mpm.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate random matrix population models (MPMs) based on life history archetypes — random_mpm","title":"Generate random matrix population models (MPMs) based on life history archetypes — random_mpm","text":"Generates random matrix population models (MPMs) element values based defined life history archetypes. Survival transition/growth probabilities particular stage restricted less equal 1 drawing Dirichlet distribution. user can specify archetypes (Takada et al. 2018) restrict MPMs ways: Archetype 1: elements positive, although may small. Therefore, transition /stage possible. model describes life history individuals can progress retrogress rapidly. Archetype 2: form archetype 1 (transition /stage possible), survival probability (column sums survival matrix) increases monotonously individuals advance later stages. model, one first archetype, also allows rapid progression retrogression, realistic stage-specific survival probability increases stage advancement. Archetype 3: positive non-zero elements survival allowed diagonal lower sub-diagonal matrix model represents life cycle species retrogression allowed, progression can happen immediately larger/developed stage (slow progression, e.g., trees). Archetype 4: archetype general form archetype 3, assumption stage-specific survival increases individuals increase size/developmental stage. respect similar archetype 2.","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/random_mpm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate random matrix population models (MPMs) based on life history archetypes — random_mpm","text":"","code":"random_mpm(n_stages, fecundity, archetype = 1, split = FALSE)"},{"path":"https://jonesor.github.io/mpmsim/reference/random_mpm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate random matrix population models (MPMs) based on life history archetypes — random_mpm","text":"n_stages integer defining number stages MPM. fecundity Mean fecundity. value lambda value Poisson distribution value fecundity drawn. integer length 1 vector integers length equal number stages. reproduction particular age class, use value 0. archetype Indication life history archetype used, based Takada et al. 2018. integer 1 4. split TRUE/FALSE, indicating whether matrix produced split survival matrix fertility matrix. Yeah true, output becomes list matrix element. Otherwise, output single matrix.","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/random_mpm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate random matrix population models (MPMs) based on life history archetypes — random_mpm","text":"Returns random matrix population model characteristics determined archetype selected fecundity vector. split = TRUE, matrix split separate fertility growth/survival matrices, returned list.","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/random_mpm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate random matrix population models (MPMs) based on life history archetypes — random_mpm","text":"4 Archetypes, fecundity placed single element top right matrix, single value. vector length n_stages fertility vector spans entire top row matrix.","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/random_mpm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generate random matrix population models (MPMs) based on life history archetypes — random_mpm","text":"Takada, T., Kawai, Y., & Salguero-Gómez, R. (2018). cautionary note elasticity analyses ternary plot using randomly generated population matrices. Population Ecology, 60(1), 37–47.","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/random_mpm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate random matrix population models (MPMs) based on life history archetypes — random_mpm","text":"Owen Jones jones@biology.sdu.dk","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/random_mpm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate random matrix population models (MPMs) based on life history archetypes — random_mpm","text":"","code":"random_mpm(n_stages = 2, fecundity = 20, archetype = 1, split = FALSE) #>           [,1]       [,2] #> [1,] 0.2544362 21.1330887 #> [2,] 0.2128146  0.8135033 random_mpm(n_stages = 2, fecundity = 20, archetype = 2, split = TRUE) #> $matU #>            [,1]      [,2] #> [1,] 0.02708080 0.1248276 #> [2,] 0.07741308 0.8454938 #>  #> $matF #>      [,1] [,2] #> [1,]    0   26 #> [2,]    0    0 #>  random_mpm(n_stages = 3, fecundity = 20, archetype = 3, split = FALSE) #>           [,1]      [,2]     [,3] #> [1,] 0.7918145 0.0000000 26.00000 #> [2,] 0.1890279 0.1541979  0.00000 #> [3,] 0.0000000 0.6147462  0.67372 random_mpm(n_stages = 4, fecundity = 20, archetype = 4, split = TRUE) #> $matU #>            [,1]      [,2]       [,3]      [,4] #> [1,] 0.30731705 0.0000000 0.00000000 0.0000000 #> [2,] 0.03178019 0.2955791 0.00000000 0.0000000 #> [3,] 0.00000000 0.3344105 0.02261162 0.0000000 #> [4,] 0.00000000 0.0000000 0.62233161 0.7778905 #>  #> $matF #>      [,1] [,2] [,3] [,4] #> [1,]    0    0    0   14 #> [2,]    0    0    0    0 #> [3,]    0    0    0    0 #> [4,]    0    0    0    0 #>  random_mpm(   n_stages = 5, fecundity = c(0, 0, 4, 8, 10), archetype = 4,   split = TRUE ) #> $matU #>           [,1]      [,2]      [,3]       [,4]      [,5] #> [1,] 0.2727765 0.0000000 0.0000000 0.00000000 0.0000000 #> [2,] 0.2306655 0.4041309 0.0000000 0.00000000 0.0000000 #> [3,] 0.0000000 0.2471555 0.3841358 0.00000000 0.0000000 #> [4,] 0.0000000 0.0000000 0.3880578 0.83629642 0.0000000 #> [5,] 0.0000000 0.0000000 0.0000000 0.01315338 0.9726453 #>  #> $matF #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0    0    7    7   14 #> [2,]    0    0    0    0    0 #> [3,]    0    0    0    0    0 #> [4,]    0    0    0    0    0 #> [5,]    0    0    0    0    0 #>"},{"path":"https://jonesor.github.io/mpmsim/reference/simulate_mpm.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate matrix population models (MPMs) based on expected transition rates\nand sample sizes — simulate_mpm","title":"Simulate matrix population models (MPMs) based on expected transition rates\nand sample sizes — simulate_mpm","text":"Simulates matrix population model based expected values transition matrix. expected values provided two matrices matU growth/development survival transitions matF fecundity transitions.matU values simulated based expected probabilities, assuming binomial process sample size defined sample_size. matF values simulated using Poisson process sample size defined sample_size.Thus users can expect large sample sizes result simulated matrices match closely expectations, simulated matrices small sample sizes variable.","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/simulate_mpm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate matrix population models (MPMs) based on expected transition rates\nand sample sizes — simulate_mpm","text":"","code":"simulate_mpm(matU, matF, sample_size, split = TRUE)"},{"path":"https://jonesor.github.io/mpmsim/reference/simulate_mpm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate matrix population models (MPMs) based on expected transition rates\nand sample sizes — simulate_mpm","text":"matU matrix survival probabilities matF matrix mean fecundity values sample_size matrix sample size element matrix, single value applied whole matrix split logical, whether split output survival fecundity matrices ","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/simulate_mpm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate matrix population models (MPMs) based on expected transition rates\nand sample sizes — simulate_mpm","text":"list matrices survival fecundity split = TRUE, otherwise single matrix sum survival fecundity","code":""},{"path":"https://jonesor.github.io/mpmsim/reference/simulate_mpm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate matrix population models (MPMs) based on expected transition rates\nand sample sizes — simulate_mpm","text":"","code":"mats <- make_leslie_matrix(   survival = c(0.1, 0.2, 0.5),   fertility = c(0, 1.2, 2.4),   n_stages = 3, split = TRUE ) ssMat <- matrix(10, nrow = 3, ncol = 3)  simulate_mpm(   matU = mats$matU, matF = mats$matF,   sample_size = ssMat, split = TRUE ) #> $matU #>      [,1] [,2] [,3] #> [1,]    0  0.0  0.0 #> [2,]    0  0.0  0.0 #> [3,]    0  0.2  0.6 #>  #> $matF #>      [,1] [,2] [,3] #> [1,]    0  1.1  2.3 #> [2,]    0  0.0  0.0 #> [3,]    0  0.0  0.0 #>"},{"path":"https://jonesor.github.io/mpmsim/news/index.html","id":"mpmsim-development-version","dir":"Changelog","previous_headings":"","what":"mpmsim (development version)","title":"mpmsim (development version)","text":"added plot_matrix function plot matrix heatmap","code":""},{"path":"https://jonesor.github.io/mpmsim/news/index.html","id":"mpmsim-010","dir":"Changelog","previous_headings":"","what":"mpmsim 0.1.0","title":"mpmsim 0.1.0","text":"Added site improved documentation","code":""},{"path":"https://jonesor.github.io/mpmsim/news/index.html","id":"mpmsim-0009000","dir":"Changelog","previous_headings":"","what":"mpmsim 0.0.0.9000","title":"mpmsim 0.0.0.9000","text":"Added NEWS.md file track changes package. Added unit tests.","code":""}]
